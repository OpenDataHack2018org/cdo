
static char *InfoHelp[] = {
    "@Begin_info",
    "NAME",
    "    info - File information",
    "",
    "SYNOPSIS",
    "    info  ifiles",
    "",
    "DESCRIPTION",
    "    Prints simple statistics for each field of a file.",
    "    For each field the operator print in one line the:",
    "        - field number",
    "        - date and time",
    "        - code",
    "        - level",
    "        - size of the grid",
    "        - number of missing values",
    "        - minimum, mean and maximum",
    "    The mean value is computed without the use of area weight!",
    "",
    "SEE ALSO",
    "    infov, map",
    "",
    "@End_info",
    "@Begin_infov",
    "NAME",
    "    infov - File information",
    "",
    "SYNOPSIS",
    "    infov  ifiles",
    "",
    "DESCRIPTION",
    "    The same as operator info. Using the name instead of the code number",
    "    to identify the variable.",
    "",
    "SEE ALSO",
    "    info, map",
    "",
    "@End_infov",
    "@Begin_map",
    "NAME",
    "    map - Print simple map",
    "",
    "SYNOPSIS",
    "    map  ifiles",
    "",
    "DESCRIPTION",
    "    Prints simple statistics and a map for each field of a file.",
    "    The map will be printed only for fields on a rectangular grid.",
    "",
    "SEE ALSO",
    "    info, infov",
    "",
    "@End_map",
    NULL
};

static char *SinfoHelp[] = {
    "@Begin_sinfo",
    "NAME",
    "    sinfo - Short file information",
    "",
    "SYNOPSIS",
    "    sinfo  ifile",
    "",
    "DESCRIPTION",
    "    Prints short information for each variable of a file.",
    "    For each variable the operator print in one line the:",
    "        - variable number",
    "        - institute and source",
    "        - code and codetable",
    "        - horizontal grid size and number",
    "        - vertical grid size and number",
    "",
    "SEE ALSO",
    "    sinfov",
    "",
    "@End_sinfo",
    "@Begin_sinfov",
    "NAME",
    "    sinfov - Short file information",
    "",
    "SYNOPSIS",
    "    sinfov  ifile",
    "",
    "DESCRIPTION",
    "    The same as operator sinfo. Using the name instead of the code number",
    "    to identify the variable.",
    "",
    "SEE ALSO",
    "    sinfo",
    "",
    "@End_sinfov",
    NULL
};

static char *DiffHelp[] = {
    "@Begin_diff",
    "NAME",
    "    diff - Differences of two files",
    "",
    "SYNOPSIS",
    "    diff  ifile1 ifile2",
    "",
    "DESCRIPTION",
    "    Print statistics over differences of two files.",
    "    For each pair of fields the operator print in one line the:",
    "        - field number",
    "        - date and time",
    "        - code",
    "        - level",
    "        - size of the grid",
    "        - number of missing values",
    "        - occurrence of coefficient pairs with different signs",
    "        - occurrence of zero values",
    "        - maximum absolute difference of coefficient pairs",
    "        - maximum relative difference of non-zero coefficient pairs with equal signs",
    "",
    "SEE ALSO",
    "    diffv",
    "",
    "@End_diff",
    "@Begin_diffv",
    "NAME",
    "    diffv - Differences of two files",
    "",
    "SYNOPSIS",
    "    diffv  ifile1 ifile2",
    "",
    "DESCRIPTION",
    "    The same as operator diff. Using the name instead of the code number",
    "    to identify the variable.",
    "",
    "SEE ALSO",
    "    diff",
    "",
    "@End_diffv",
    NULL
};

static char *NinfoHelp[] = {
    "@Begin_nyear",
    "NAME",
    "    nyear - Number of years",
    "",
    "SYNOPSIS",
    "    nyear  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of different years.",
    "",
    "SEE ALSO",
    "    nmon, ndate, ntime, ncode, nvar, nlevel",
    "",
    "@End_nyear",
    "@Begin_nmon",
    "NAME",
    "    nmon - Number of months",
    "",
    "SYNOPSIS",
    "    nmon  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of different combinations of years and months.",
    "",
    "SEE ALSO",
    "    nyear, ndate, ntime, ncode, nvar, nlevel",
    "",
    "@End_nmon",
    "@Begin_ndate",
    "NAME",
    "    ndate - Number of dates",
    "",
    "SYNOPSIS",
    "    ndate  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of different dates.",
    "",
    "SEE ALSO",
    "    nyear, nmon, ntime, ncode, nvar, nlevel",
    "",
    "@End_ndate",
    "@Begin_ntime",
    "NAME",
    "    ntime - Number of timesteps",
    "",
    "SYNOPSIS",
    "    ntime  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of timesteps.",
    "",
    "SEE ALSO",
    "    nyear, nmon, ndate, ncode, nvar, nlevel",
    "",
    "@End_ntime",
    "@Begin_ncode",
    "NAME",
    "    ncode - Number of codes",
    "",
    "SYNOPSIS",
    "    ncode  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of different codes.",
    "",
    "SEE ALSO",
    "    nyear, nmon, ndate, ntime, nvar, nlevel",
    "",
    "@End_ncode",
    "@Begin_nvar",
    "NAME",
    "    nvar - Number of variables",
    "",
    "SYNOPSIS",
    "    nvar  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of different variables.",
    "",
    "SEE ALSO",
    "    nyear, nmon, ndate, ntime, ncode, nlevel",
    "",
    "@End_nvar",
    "@Begin_nlevel",
    "NAME",
    "    nlevel - Number of levels",
    "",
    "SYNOPSIS",
    "    nlevel  ifile",
    "",
    "DESCRIPTION",
    "    Prints the number of levels for each variable.",
    "",
    "SEE ALSO",
    "    nyear, nmon, ndate, ntime, ncode, nvar",
    "",
    "@End_nlevel",
    NULL
};

static char *ShowinfoHelp[] = {
    "@Begin_showyear",
    "NAME",
    "    showyear - Show years",
    "",
    "SYNOPSIS",
    "    showyear  ifile",
    "",
    "DESCRIPTION",
    "    Prints all different years.",
    "",
    "SEE ALSO",
    "    showmon, showdate, showtime, showcode, showvar, showlevel",
    "",
    "@End_showyear",
    "@Begin_showmon",
    "NAME",
    "    showmon - Show months",
    "",
    "SYNOPSIS",
    "    showmon  ifile",
    "",
    "DESCRIPTION",
    "    Prints all different months.",
    "",
    "SEE ALSO",
    "    showyear, showdate, showtime, showcode, showvar, showlevel",
    "",
    "@End_showmon",
    "@Begin_showdate",
    "NAME",
    "    showdate - Show dates",
    "",
    "SYNOPSIS",
    "    showdate  ifile",
    "",
    "DESCRIPTION",
    "    Prints all different dates.",
    "",
    "SEE ALSO",
    "    showyear, showmon, showtime, showcode, showvar, showlevel",
    "",
    "@End_showdate",
    "@Begin_showtime",
    "NAME",
    "    showtime - Show timesteps",
    "",
    "SYNOPSIS",
    "    showtime  ifile",
    "",
    "DESCRIPTION",
    "    Prints all timesteps.",
    "",
    "SEE ALSO",
    "    showyear, showmon, showdate, showcode, showvar, showlevel",
    "",
    "@End_showtime",
    "@Begin_showcode",
    "NAME",
    "    showcode - Show codes",
    "",
    "SYNOPSIS",
    "    showcode  ifile",
    "",
    "DESCRIPTION",
    "    Prints the code of all different variables.",
    "",
    "SEE ALSO",
    "    showyear, showmon, showdate, showtime, showvar, showlevel",
    "",
    "@End_showcode",
    "@Begin_showvar",
    "NAME",
    "    showvar - Show variable names",
    "",
    "SYNOPSIS",
    "    showvar  ifile",
    "",
    "DESCRIPTION",
    "    Print all different variable names.",
    "",
    "SEE ALSO",
    "    showyear, showmon, showdate, showtime, showcode, showlevel",
    "",
    "@End_showvar",
    "@Begin_showlevel",
    "NAME",
    "    showlevel - Show levels",
    "",
    "SYNOPSIS",
    "    showlevel  ifile",
    "",
    "DESCRIPTION",
    "    Prints all levels for each variable.",
    "",
    "SEE ALSO",
    "    showyear, showmon, showdate, showtime, showcode, showvar",
    "",
    "@End_showlevel",
    NULL
};

static char *FiledesHelp[] = {
    "@Begin_vardes",
    "NAME",
    "    vardes - Variable description",
    "",
    "SYNOPSIS",
    "    vardes  ifile",
    "",
    "DESCRIPTION",
    "    Prints a table with a description of all variables.",
    "    For each variable the operator print in one line the",
    "    code, name, description and units.",
    "",
    "SEE ALSO",
    "    griddes, vct",
    "",
    "@End_vardes",
    "@Begin_griddes",
    "NAME",
    "    griddes - Grid description",
    "",
    "SYNOPSIS",
    "    griddes  ifile",
    "",
    "DESCRIPTION",
    "    Prints the description of all grids in a file.",
    "",
    "SEE ALSO",
    "    vardes, vct",
    "",
    "@End_griddes",
    "@Begin_vct",
    "NAME",
    "    vct - Vertical coordinate table",
    "",
    "SYNOPSIS",
    "    vct  ifile",
    "",
    "DESCRIPTION",
    "    Prints the vertical coordinate table.",
    "",
    "SEE ALSO",
    "    vardes, griddes",
    "",
    "@End_vct",
    NULL
};

static char *CopyHelp[] = {
    "@Begin_copy",
    "NAME",
    "    copy - Copy files",
    "",
    "SYNOPSIS",
    "    copy  ifiles ofile",
    "",
    "DESCRIPTION",
    "    Copies all input files to ofile. Each input file must have the same variables with complete timesteps.",
    "",
    "@End_copy",
    NULL
};

static char *CatHelp[] = {
    "@Begin_cat",
    "NAME",
    "    cat - Concatenate files",
    "",
    "SYNOPSIS",
    "    cat  ifiles ofile",
    "",
    "DESCRIPTION",
    "    Concatenate ifiles and add the result at the end of ofile.",
    "    Each input file must have the same variables with complete timesteps.",
    "    The output file must exist.",
    "",
    "@End_cat",
    NULL
};

static char *ReplaceHelp[] = {
    "@Begin_replace",
    "NAME",
    "    replace - Replace variables",
    "",
    "SYNOPSIS",
    "    replace  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    Replaces all variables of ifile2 in ifile1 and write the result to ofile.",
    "    Both input files must have the same number of timesteps.",
    "",
    "@End_replace",
    NULL
};

static char *MergeHelp[] = {
    "@Begin_merge",
    "NAME",
    "    merge - Merge files",
    "",
    "SYNOPSIS",
    "    merge  ifiles ofile",
    "",
    "DESCRIPTION",
    "    Merges all variables of ifiles to ofile. Each input file must have different variables ",
    "    with the same number of timesteps.",
    "",
    "@End_merge",
    NULL
};

static char *SplitHelp[] = {
    "@Begin_splitcode",
    "NAME",
    "    splitcode - Split codes",
    "",
    "SYNOPSIS",
    "    splitcode  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each code.",
    "",
    "SEE ALSO",
    "    splitvar, splitlevel, splitgrid, splitzaxis",
    "",
    "@End_splitcode",
    "@Begin_splitvar",
    "NAME",
    "    splitvar - Split variables",
    "",
    "SYNOPSIS",
    "    splitvar  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each variable.",
    "",
    "SEE ALSO",
    "    splitcode, splitlevel, splitgrid, splitzaxis",
    "",
    "@End_splitvar",
    "@Begin_splitlevel",
    "NAME",
    "    splitlevel - Split levels",
    "",
    "SYNOPSIS",
    "    splitlevel  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each level.",
    "",
    "SEE ALSO",
    "    splitcode, splitvar, splitgrid, splitzaxis",
    "",
    "@End_splitlevel",
    "@Begin_splitgrid",
    "NAME",
    "    splitgrid - Split grids",
    "",
    "SYNOPSIS",
    "    splitgrid  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each grid.",
    "",
    "SEE ALSO",
    "    splitcode, splitvar, splitlevel, splitzaxis",
    "",
    "@End_splitgrid",
    "@Begin_splitzaxis",
    "NAME",
    "    splitzaxis - Split zaxis",
    "",
    "SYNOPSIS",
    "    splitzaxis  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each zaxis.",
    "",
    "SEE ALSO",
    "    splitcode, splitvar, splitlevel, splitgrid",
    "",
    "@End_splitzaxis",
    NULL
};

static char *SplittimeHelp[] = {
    "@Begin_splithour",
    "NAME",
    "    splithour - Split hours",
    "",
    "SYNOPSIS",
    "    splithour  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each hour.",
    "",
    "SEE ALSO",
    "    splitday, splitmon, splitseas",
    "",
    "@End_splithour",
    "@Begin_splitday",
    "NAME",
    "    splitday - Split days",
    "",
    "SYNOPSIS",
    "    splitday  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each day.",
    "",
    "SEE ALSO",
    "    splithour, splitmon, splitseas",
    "",
    "@End_splitday",
    "@Begin_splitmon",
    "NAME",
    "    splitmon - Split months",
    "",
    "SYNOPSIS",
    "    splitmon  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each month.",
    "",
    "SEE ALSO",
    "    splithour, splitday, splitseas",
    "",
    "@End_splitmon",
    "@Begin_splitseas",
    "NAME",
    "    splitseas - Split seasons",
    "",
    "SYNOPSIS",
    "    splitseas  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each season.",
    "",
    "SEE ALSO",
    "    splithour, splitday, splitmon",
    "",
    "@End_splitseas",
    NULL
};

static char *SplityearHelp[] = {
    "@Begin_splityear",
    "NAME",
    "    splityear - Split years",
    "",
    "SYNOPSIS",
    "    splityear  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each year.",
    "",
    "@End_splityear",
    NULL
};

static char *SplitrecHelp[] = {
    "@Begin_splitrec",
    "NAME",
    "    splitrec - Split records",
    "",
    "SYNOPSIS",
    "    splitrec  ifile oprefix",
    "",
    "DESCRIPTION",
    "    Splits a file into pieces, one for each record.",
    "",
    "@End_splitrec",
    NULL
};

static char *OutputHelp[] = {
    "@Begin_output",
    "NAME",
    "    output - ASCII output",
    "",
    "SYNOPSIS",
    "    output  ifiles",
    "",
    "DESCRIPTION",
    "    Prints all values to standard output.",
    "    Each row has 6 elements with the C-style format \"\%13.6g\".",
    "    ",
    "",
    "SEE ALSO",
    "    outputf, outputint, outputsrv, outputext",
    "",
    "@End_output",
    "@Begin_outputf",
    "NAME",
    "    outputf - Formatted output",
    "",
    "SYNOPSIS",
    "    outputf,format,nelem  ifiles",
    "",
    "DESCRIPTION",
    "    Prints all values to standard output.",
    "    The format and number of elements for each column",
    "    can be specified by the parameters.",
    "",
    "PARAMETER",
    "    format   STRING C-style format for one element",
    "    nelem    INTEGER Number of elements for each row",
    "",
    "SEE ALSO",
    "    output, outputint, outputsrv, outputext",
    "",
    "@End_outputf",
    "@Begin_outputint",
    "NAME",
    "    outputint - Integer output",
    "",
    "SYNOPSIS",
    "    outputint  ifiles",
    "",
    "DESCRIPTION",
    "    Prints all values rounded to the nearest intergers to standard output.",
    "",
    "SEE ALSO",
    "    output, outputf, outputsrv, outputext",
    "",
    "@End_outputint",
    "@Begin_outputsrv",
    "NAME",
    "    outputsrv - SERVICE output",
    "",
    "SYNOPSIS",
    "    outputsrv  ifiles",
    "",
    "DESCRIPTION",
    "    Prints all values to standard output.",
    "    Each field with a header of 8 integers (SERVICE likely).",
    "",
    "SEE ALSO",
    "    output, outputf, outputint, outputext",
    "",
    "@End_outputsrv",
    "@Begin_outputext",
    "NAME",
    "    outputext - EXTRA output",
    "",
    "SYNOPSIS",
    "    outputext  ifiles",
    "",
    "DESCRIPTION",
    "    Prints all values to standard output.",
    "    Each field with a header of 4 integers (EXTRA likely).",
    "",
    "SEE ALSO",
    "    output, outputf, outputint, outputsrv",
    "",
    "@End_outputext",
    NULL
};

static char *VargenHelp[] = {
    "@Begin_const",
    "NAME",
    "    const - Constant variable",
    "",
    "SYNOPSIS",
    "    const,const,grid  ofile",
    "",
    "DESCRIPTION",
    "    Generates a constant variable.",
    "",
    "PARAMETER",
    "    const   FLOAT   Constant",
    "    grid    STRING  Grid description file or name",
    "",
    "SEE ALSO",
    "    random",
    "",
    "@End_const",
    "@Begin_random",
    "NAME",
    "    random - Variable with random values",
    "",
    "SYNOPSIS",
    "    random,grid  ofile",
    "",
    "DESCRIPTION",
    "    Generates a variable with rectangularly distrubuted random numbers in the interval [0,1].",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name",
    "",
    "SEE ALSO",
    "    const",
    "",
    "@End_random",
    NULL
};

static char *VardupHelp[] = {
    "@Begin_vardup",
    "NAME",
    "    vardup - Duplicate variables",
    "",
    "SYNOPSIS",
    "    vardup  ifile ofile",
    "",
    "DESCRIPTION",
    "    Duplicate all variables.",
    "",
    "SEE ALSO",
    "    varmul",
    "",
    "@End_vardup",
    "@Begin_varmul",
    "NAME",
    "    varmul - Multiply variables",
    "",
    "SYNOPSIS",
    "    varmul,nmul  ifile ofile",
    "",
    "DESCRIPTION",
    "    Multiply all variables.",
    "",
    "PARAMETER",
    "    nmul   INTEGER  Number of multiplications",
    "",
    "SEE ALSO",
    "    vardup",
    "",
    "@End_varmul",
    NULL
};

static char *SetHelp[] = {
    "@Begin_setpartab",
    "NAME",
    "    setpartab - Set parameter table",
    "",
    "SYNOPSIS",
    "    setpartab,table  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the parameter table for all variables.",
    "",
    "PARAMETER",
    "    table   STRING  Parameter table file or name",
    "",
    "SEE ALSO",
    "    setcode, setvar, setlevel",
    "",
    "@End_setpartab",
    "@Begin_setcode",
    "NAME",
    "    setcode - Set code",
    "",
    "SYNOPSIS",
    "    setcode,code  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the code for all variables to the same given value.",
    "",
    "PARAMETER",
    "    code   INTEGER Code number",
    "",
    "SEE ALSO",
    "    setpartab, setvar, setlevel",
    "",
    "@End_setcode",
    "@Begin_setvar",
    "NAME",
    "    setvar - Set variable name",
    "",
    "SYNOPSIS",
    "    setvar,name  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the name of the first variable.",
    "",
    "PARAMETER",
    "    name   STRING  Variable name",
    "",
    "SEE ALSO",
    "    setpartab, setcode, setlevel",
    "",
    "@End_setvar",
    "@Begin_setlevel",
    "NAME",
    "    setlevel - Set level",
    "",
    "SYNOPSIS",
    "    setlevel,level  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the first level of all variables.",
    "",
    "PARAMETER",
    "    level   FLOAT New level",
    "",
    "SEE ALSO",
    "    setpartab, setcode, setvar",
    "",
    "@End_setlevel",
    NULL
};

static char *SettimeHelp[] = {
    "@Begin_setdate",
    "NAME",
    "    setdate - Set date",
    "",
    "SYNOPSIS",
    "    setdate,date  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the date in every timestep to the same given value.",
    "",
    "PARAMETER",
    "    date   STRING  New date (format YYYY-MM-DD)",
    "",
    "SEE ALSO",
    "    settime, setday, setmon, setyear, settunits, settaxis, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_setdate",
    "@Begin_settime",
    "NAME",
    "    settime - Set time",
    "",
    "SYNOPSIS",
    "    settime,time  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the time in every timestep to the same given value.",
    "",
    "PARAMETER",
    "    time   STRING  New time (format HH:MM)",
    "",
    "SEE ALSO",
    "    setdate, setday, setmon, setyear, settunits, settaxis, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_settime",
    "@Begin_setday",
    "NAME",
    "    setday - Set day",
    "",
    "SYNOPSIS",
    "    setday,day  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the day in every timestep to the same given value.",
    "",
    "PARAMETER",
    "    day   INTEGER  Value of the new day",
    "",
    "SEE ALSO",
    "    setdate, settime, setmon, setyear, settunits, settaxis, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_setday",
    "@Begin_setmon",
    "NAME",
    "    setmon - Set month",
    "",
    "SYNOPSIS",
    "    setmon,month  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the month in every timestep to the same given value.",
    "",
    "PARAMETER",
    "    month   INTEGER  Value of the new month",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setyear, settunits, settaxis, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_setmon",
    "@Begin_setyear",
    "NAME",
    "    setyear - Set year",
    "",
    "SYNOPSIS",
    "    setyear,year  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the year in every timestep to the same given value.",
    "",
    "PARAMETER",
    "    year   INTEGER  Value of the new year",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setmon, settunits, settaxis, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_setyear",
    "@Begin_settunits",
    "NAME",
    "    settunits - Set time units",
    "",
    "SYNOPSIS",
    "    settunits,units  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the time units.",
    "",
    "PARAMETER",
    "    units   STRING  Base units of the time axis (minutes, hours, days, months, years).",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setmon, setyear, settaxis, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_settunits",
    "@Begin_settaxis",
    "NAME",
    "    settaxis - Set time axis",
    "",
    "SYNOPSIS",
    "    settaxis,date,time,[inc]  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the time axis.",
    "",
    "PARAMETER",
    "    date   STRING  Start date (format YYYY-MM-DD)",
    "    time   STRING  Start time (format HH:MM)",
    "    inc    STRING  Optional increment (e.g. 12hour) [default: 0hour]",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setmon, setyear, settunits, setreftime, setcalendar,",
    "    shifttime",
    "",
    "@End_settaxis",
    "@Begin_setreftime",
    "NAME",
    "    setreftime - Set reference time",
    "",
    "SYNOPSIS",
    "    setreftime,date,time  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the reference time of an relative time axis.",
    "",
    "PARAMETER",
    "    date   STRING  Reference date (format YYYY-MM-DD)",
    "    time   STRING  Reference time (format HH:MM)",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setmon, setyear, settunits, settaxis, setcalendar,",
    "    shifttime",
    "",
    "@End_setreftime",
    "@Begin_setcalendar",
    "NAME",
    "    setcalendar - Set calendar",
    "",
    "SYNOPSIS",
    "    setcalendar,calendar  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the calendar.",
    "",
    "PARAMETER",
    "    calendar   STRING  Calendar (standard, 360days, 365days, 366days)",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setmon, setyear, settunits, settaxis, setreftime,",
    "    shifttime",
    "",
    "@End_setcalendar",
    "@Begin_shifttime",
    "NAME",
    "    shifttime - Shift timesteps",
    "",
    "SYNOPSIS",
    "    shifttime,sval  ifile ofile",
    "",
    "DESCRIPTION",
    "    Shifts all timesteps by the parameter sval.",
    "",
    "PARAMETER",
    "    sval   STRING   Shift value (e.g. -3hour)",
    "",
    "SEE ALSO",
    "    setdate, settime, setday, setmon, setyear, settunits, settaxis, setreftime,",
    "    setcalendar",
    "",
    "@End_shifttime",
    NULL
};

static char *ChangeHelp[] = {
    "@Begin_chcode",
    "NAME",
    "    chcode - Change code",
    "",
    "SYNOPSIS",
    "    chcode,ocode,ncode,...  ifile ofile",
    "",
    "DESCRIPTION",
    "    Changes some user given codes to new user given values.",
    "",
    "PARAMETER",
    "    ocode,ncode,...   INTEGER  Pairs of old and new code",
    "",
    "SEE ALSO",
    "    chvar, chlevel, chlevelc, chlevelv",
    "",
    "@End_chcode",
    "@Begin_chvar",
    "NAME",
    "    chvar - Change variable name",
    "",
    "SYNOPSIS",
    "    chvar,ovar,nvar,...  ifile ofile",
    "",
    "DESCRIPTION",
    "    Changes some user given variable names to new user given names.",
    "",
    "PARAMETER",
    "    ovar,nvar,...   STRING  Pairs of old and new variable name",
    "",
    "SEE ALSO",
    "    chcode, chlevel, chlevelc, chlevelv",
    "",
    "@End_chvar",
    "@Begin_chlevel",
    "NAME",
    "    chlevel - Change level",
    "",
    "SYNOPSIS",
    "    chlevel,olevel,nlevel,...  ifile ofile",
    "",
    "DESCRIPTION",
    "    Changes some user given levels to new user given values.",
    "",
    "PARAMETER",
    "    olevel,nlevel,...   FLOAT  Pairs of old and new level",
    "",
    "SEE ALSO",
    "    chcode, chvar, chlevelc, chlevelv",
    "",
    "@End_chlevel",
    "@Begin_chlevelc",
    "NAME",
    "    chlevelc - Change level of one code",
    "",
    "SYNOPSIS",
    "    chlevelc,code,olevel,nlevel  ifile ofile",
    "",
    "DESCRIPTION",
    "    Changes one level of a user given code number.",
    "",
    "PARAMETER",
    "    code     INTEGER Code number",
    "    olevel   FLOAT   Old level",
    "    nlevel   FLOAT   New level",
    "",
    "SEE ALSO",
    "    chcode, chvar, chlevel, chlevelv",
    "",
    "@End_chlevelc",
    "@Begin_chlevelv",
    "NAME",
    "    chlevelv - Change level of one variable",
    "",
    "SYNOPSIS",
    "    chlevelv,var,olevel,nlevel  ifile ofile",
    "",
    "DESCRIPTION",
    "    Changes one level of a user given variable.",
    "",
    "PARAMETER",
    "    var      STRING Variable name",
    "    olevel   FLOAT  Old level",
    "    nlevel   FLOAT  New level",
    "",
    "SEE ALSO",
    "    chcode, chvar, chlevel, chlevelc",
    "",
    "@End_chlevelv",
    NULL
};

static char *SetgridHelp[] = {
    "@Begin_setgrid",
    "NAME",
    "    setgrid - Set grid",
    "",
    "SYNOPSIS",
    "    setgrid,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the grid information for all variables.",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "SEE ALSO",
    "    setgridtype",
    "",
    "@End_setgrid",
    "@Begin_setgridtype",
    "NAME",
    "    setgridtype - Set grid type",
    "",
    "SYNOPSIS",
    "    setgridtype,gridtype  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the grid type for all grids to a user given value.",
    "",
    "PARAMETER",
    "    gridtype   STRING  New grid type (curvilinear or cell)",
    "",
    "SEE ALSO",
    "    setgrid",
    "",
    "@End_setgridtype",
    NULL
};

static char *SetzaxisHelp[] = {
    "@Begin_setzaxis",
    "NAME",
    "    setzaxis - Set zaxis",
    "",
    "SYNOPSIS",
    "    setzaxis,zaxis  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets the zaxis information for all variables.",
    "",
    "PARAMETER",
    "    zaxis   STRING  Zaxis description file or name of the target zaxis",
    "",
    "@End_setzaxis",
    NULL
};

static char *SetgattHelp[] = {
    "@Begin_setgatt",
    "NAME",
    "    setgatt - Set global attribute",
    "",
    "SYNOPSIS",
    "    setgatt,attname,attstring  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets one user defined global text attribute.",
    "",
    "PARAMETER",
    "    attname,attstring   STRING  Name and text of the global attribute",
    "",
    "SEE ALSO",
    "    setgatts",
    "",
    "@End_setgatt",
    "@Begin_setgatts",
    "NAME",
    "    setgatts - Set global attributes",
    "",
    "SYNOPSIS",
    "    setgatts,attfile  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sets user defined global text attributes. The name and text",
    "    of the global attrubutes are read from a file.",
    "",
    "PARAMETER",
    "    attfile   STRING  File name which contains global attributes",
    "",
    "SEE ALSO",
    "    setgatt",
    "",
    "@End_setgatts",
    NULL
};

static char *InvertHelp[] = {
    "@Begin_invertlat",
    "NAME",
    "    invertlat - Invert latitude",
    "",
    "SYNOPSIS",
    "    invertlat  ifile ofile",
    "",
    "DESCRIPTION",
    "    Invert the latitude of a field.",
    "",
    "SEE ALSO",
    "    invertlon, invertlatdes, invertlondes, invertlatdata, invertlondata",
    "",
    "@End_invertlat",
    "@Begin_invertlon",
    "NAME",
    "    invertlon - Invert longitude",
    "",
    "SYNOPSIS",
    "    invertlon  ifile ofile",
    "",
    "DESCRIPTION",
    "    Invert the longitude of a field.",
    "",
    "SEE ALSO",
    "    invertlat, invertlatdes, invertlondes, invertlatdata, invertlondata",
    "",
    "@End_invertlon",
    "@Begin_invertlatdes",
    "NAME",
    "    invertlatdes - Invert latitude decription",
    "",
    "SYNOPSIS",
    "    invertlatdes  ifile ofile",
    "",
    "DESCRIPTION",
    "    Invert only the latitude decription of a field.",
    "",
    "SEE ALSO",
    "    invertlat, invertlon, invertlondes, invertlatdata, invertlondata",
    "",
    "@End_invertlatdes",
    "@Begin_invertlondes",
    "NAME",
    "    invertlondes - Invert longitude decription",
    "",
    "SYNOPSIS",
    "    invertlondes  ifile ofile",
    "",
    "DESCRIPTION",
    "    Invert only the longitude decription of a field.",
    "",
    "SEE ALSO",
    "    invertlat, invertlon, invertlatdes, invertlatdata, invertlondata",
    "",
    "@End_invertlondes",
    "@Begin_invertlatdata",
    "NAME",
    "    invertlatdata - Invert latitude data",
    "",
    "SYNOPSIS",
    "    invertlatdata  ifile ofile",
    "",
    "DESCRIPTION",
    "    Invert only the latitude data of a field.",
    "",
    "SEE ALSO",
    "    invertlat, invertlon, invertlatdes, invertlondes, invertlondata",
    "",
    "@End_invertlatdata",
    "@Begin_invertlondata",
    "NAME",
    "    invertlondata - Invert longitude data",
    "",
    "SYNOPSIS",
    "    invertlondata  ifile ofile",
    "",
    "DESCRIPTION",
    "    Invert only the longitude data of a field.",
    "",
    "SEE ALSO",
    "    invertlat, invertlon, invertlatdes, invertlondes, invertlatdata",
    "",
    "@End_invertlondata",
    NULL
};

static char *MaskboxHelp[] = {
    "@Begin_masklonlatbox",
    "NAME",
    "    masklonlatbox - Mask lon/lat box",
    "",
    "SYNOPSIS",
    "    masklonlatbox,lon1,lon2,lat1,lat2  ifile ofile",
    "",
    "DESCRIPTION",
    "    Masks a longitude/latitude box of the rectangular understood field. The elements",
    "    inside the box are untouched, the elements outside are set to missing value.",
    "    The user has to give the longitudes and latitudes of the edges of the box.",
    "",
    "PARAMETER",
    "    lon1   FLOAT  Western longitude",
    "    lon2   FLOAT  Eastern longitude",
    "    lat1   FLOAT  Southern or northern latitude",
    "    lat2   FLOAT  Northern or southern latitude",
    "",
    "SEE ALSO",
    "    maskindexbox",
    "",
    "@End_masklonlatbox",
    "@Begin_maskindexbox",
    "NAME",
    "    maskindexbox - Mask index box",
    "",
    "SYNOPSIS",
    "    maskindexbox,idx1,idx2,idy1,idy2  ifile ofile",
    "",
    "DESCRIPTION",
    "    Masks an index box of the rectangular understood field. The elements inside",
    "    the box are untouched, the elements outside are set to missing value.",
    "    The user has to give the indexes of the edges of the box. The index of the",
    "    left edge may be greater then that of the right edge.",
    "",
    "PARAMETER",
    "    idx1   INTEGER  Index of first longitude",
    "    idx2   INTEGER  Index of last longitude",
    "    idy1   INTEGER  Index of first latitude",
    "    idy2   INTEGER  Index of last latitude",
    "",
    "SEE ALSO",
    "    masklonlatbox",
    "",
    "@End_maskindexbox",
    NULL
};

static char *EnlargeHelp[] = {
    "@Begin_enlarge",
    "NAME",
    "    enlarge - Enlarge",
    "",
    "SYNOPSIS",
    "    enlarge,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    Enlarge all fields of ifile to a user given grid.",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name",
    "",
    "@End_enlarge",
    NULL
};

static char *SelectHelp[] = {
    "@Begin_selcode",
    "NAME",
    "    selcode - Select codes",
    "",
    "SYNOPSIS",
    "    selcode,codes  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a code in a user given list.",
    "",
    "PARAMETER",
    "    codes   INTEGER  Comma separated list of codes",
    "",
    "SEE ALSO",
    "    delcode, selvar, delvar, sellevel, selgrid, selgridname, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_selcode",
    "@Begin_delcode",
    "NAME",
    "    delcode - Delete codes",
    "",
    "SYNOPSIS",
    "    delcode,codes  ifile ofile",
    "",
    "DESCRIPTION",
    "    Deletes all fields with a code in a user given list.",
    "",
    "PARAMETER",
    "    codes   INTEGER  Comma separated list of codes",
    "",
    "SEE ALSO",
    "    selcode, selvar, delvar, sellevel, selgrid, selgridname, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_delcode",
    "@Begin_selvar",
    "NAME",
    "    selvar - Select variables",
    "",
    "SYNOPSIS",
    "    selvar,vars  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a variable name in a user given list.",
    "",
    "PARAMETER",
    "    vars   STRING  Comma separated list of variable names",
    "",
    "SEE ALSO",
    "    selcode, delcode, delvar, sellevel, selgrid, selgridname, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_selvar",
    "@Begin_delvar",
    "NAME",
    "    delvar - Delete variables",
    "",
    "SYNOPSIS",
    "    delvar,vars  ifile ofile",
    "",
    "DESCRIPTION",
    "    Deletes all fields with a variable name in a user given list.",
    "",
    "PARAMETER",
    "    vars   STRING  Comma separated list of variable names",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, sellevel, selgrid, selgridname, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_delvar",
    "@Begin_sellevel",
    "NAME",
    "    sellevel - Select levels",
    "",
    "SYNOPSIS",
    "    sellevel,levels  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a level in a user given list.",
    "",
    "PARAMETER",
    "    levels   FLOAT  Comma separated list of levels",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, delvar, selgrid, selgridname, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_sellevel",
    "@Begin_selgrid",
    "NAME",
    "    selgrid - Select grids",
    "",
    "SYNOPSIS",
    "    selgrid,grids  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a grid in a user given list.",
    "",
    "PARAMETER",
    "    grids   INTEGER  Comma separated list of grids",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, delvar, sellevel, selgridname, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_selgrid",
    "@Begin_selgridname",
    "NAME",
    "    selgridname - Select grid by name",
    "",
    "SYNOPSIS",
    "    selgridname,gridnames  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a grid name in a user given list.",
    "",
    "PARAMETER",
    "    gridnames   STRING  Comma separated list of grid names",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, delvar, sellevel, selgrid, selzaxis, selzaxisname,",
    "    seltabnum",
    "",
    "@End_selgridname",
    "@Begin_selzaxis",
    "NAME",
    "    selzaxis - Select zaxis",
    "",
    "SYNOPSIS",
    "    selzaxis,zaxis  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a zaxis in a user given list.",
    "",
    "PARAMETER",
    "    zaxis   INTEGER  Comma separated list of zaxis",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, delvar, sellevel, selgrid, selgridname, selzaxisname,",
    "    seltabnum",
    "",
    "@End_selzaxis",
    "@Begin_selzaxisname",
    "NAME",
    "    selzaxisname - Select zaxis by name",
    "",
    "SYNOPSIS",
    "    selzaxisname,zaxisnames  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a zaxis name in a user given list.",
    "",
    "PARAMETER",
    "    zaxisnames   STRING  Comma separated list of zaxis names",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, delvar, sellevel, selgrid, selgridname, selzaxis,",
    "    seltabnum",
    "",
    "@End_selzaxisname",
    "@Begin_seltabnum",
    "NAME",
    "    seltabnum - Select parameter table number",
    "",
    "SYNOPSIS",
    "    seltabnum,tabnum  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a table number in a user given list.",
    "",
    "PARAMETER",
    "    tabnum   INTEGER  Comma separated list of table numbers",
    "",
    "SEE ALSO",
    "    selcode, delcode, selvar, delvar, sellevel, selgrid, selgridname, selzaxis,",
    "    selzaxisname",
    "",
    "@End_seltabnum",
    NULL
};

static char *SelrecHelp[] = {
    "@Begin_selrec",
    "NAME",
    "    selrec - Select records",
    "",
    "SYNOPSIS",
    "    selrec,records  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all fields with a record number in a user given list.",
    "    This operator does not work on netCDF data!",
    "",
    "PARAMETER",
    "    records   INTEGER  Comma separated list of records",
    "",
    "@End_selrec",
    NULL
};

static char *SeltimeHelp[] = {
    "@Begin_seltimestep",
    "NAME",
    "    seltimestep - Select timesteps",
    "",
    "SYNOPSIS",
    "    seltimestep,timesteps  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a timestep in a user given list.",
    "",
    "PARAMETER",
    "    timesteps   INTEGER  Comma separated list of timesteps",
    "",
    "SEE ALSO",
    "    seltime, selhour, selday, selmon, selseas, selyear, seldate",
    "",
    "@End_seltimestep",
    "@Begin_seltime",
    "NAME",
    "    seltime - Select times",
    "",
    "SYNOPSIS",
    "    seltime,times  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a time in a user given list.",
    "",
    "PARAMETER",
    "    times   STRING  Comma separated list of times (format HH:MM)",
    "",
    "SEE ALSO",
    "    seltimestep, selhour, selday, selmon, selseas, selyear, seldate",
    "",
    "@End_seltime",
    "@Begin_selhour",
    "NAME",
    "    selhour - Select hours",
    "",
    "SYNOPSIS",
    "    selhour,hours  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a hour in a user given list.",
    "",
    "PARAMETER",
    "    hours   INTEGER  Comma separated list of hours",
    "",
    "SEE ALSO",
    "    seltimestep, seltime, selday, selmon, selseas, selyear, seldate",
    "",
    "@End_selhour",
    "@Begin_selday",
    "NAME",
    "    selday - Select days",
    "",
    "SYNOPSIS",
    "    selday,days  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a day in a user given list.",
    "",
    "PARAMETER",
    "    days   INTEGER  Comma separated list of days",
    "",
    "SEE ALSO",
    "    seltimestep, seltime, selhour, selmon, selseas, selyear, seldate",
    "",
    "@End_selday",
    "@Begin_selmon",
    "NAME",
    "    selmon - Select months",
    "",
    "SYNOPSIS",
    "    selmon,months  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a month in a user given list.",
    "",
    "PARAMETER",
    "    months   INTEGER  Comma separated list of months",
    "",
    "SEE ALSO",
    "    seltimestep, seltime, selhour, selday, selseas, selyear, seldate",
    "",
    "@End_selmon",
    "@Begin_selseas",
    "NAME",
    "    selseas - Select seasons",
    "",
    "SYNOPSIS",
    "    selseas,seasons  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a month of a season in a user given list.",
    "",
    "PARAMETER",
    "    seasons   STRING   Comma separated list of seasons (DJF, MAM, JJA, SON)",
    "",
    "SEE ALSO",
    "    seltimestep, seltime, selhour, selday, selmon, selyear, seldate",
    "",
    "@End_selseas",
    "@Begin_selyear",
    "NAME",
    "    selyear - Select years",
    "",
    "SYNOPSIS",
    "    selyear,years  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a year in a user given list.",
    "",
    "PARAMETER",
    "    years   INTEGER  Comma separated list of years",
    "",
    "SEE ALSO",
    "    seltimestep, seltime, selhour, selday, selmon, selseas, seldate",
    "",
    "@End_selyear",
    "@Begin_seldate",
    "NAME",
    "    seldate - Select dates",
    "",
    "SYNOPSIS",
    "    seldate,date1,[date2]  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects all timesteps with a date in a given range.",
    "",
    "PARAMETER",
    "    date1   STRING  Start date (format YYYY-MM-DD)",
    "    date2   STRING  End date (format YYYY-MM-DD)",
    "",
    "SEE ALSO",
    "    seltimestep, seltime, selhour, selday, selmon, selseas, selyear",
    "",
    "@End_seldate",
    NULL
};

static char *SelboxHelp[] = {
    "@Begin_sellonlatbox",
    "NAME",
    "    sellonlatbox - Select lon/lat box",
    "",
    "SYNOPSIS",
    "    sellonlatbox,lon1,lon2,lat1,lat2  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects a longitude/latitude box of the rectangular understood field.",
    "    The user has to give the longitudes and latitudes of the edges of the box.",
    "",
    "PARAMETER",
    "    lon1   FLOAT  Western longitude",
    "    lon2   FLOAT  Eastern longitude",
    "    lat1   FLOAT  Southern or northern latitude",
    "    lat2   FLOAT  Northern or southern latitude",
    "",
    "SEE ALSO",
    "    selindexbox",
    "",
    "@End_sellonlatbox",
    "@Begin_selindexbox",
    "NAME",
    "    selindexbox - Select index box",
    "",
    "SYNOPSIS",
    "    selindexbox,idx1,idx2,idy1,idy2  ifile ofile",
    "",
    "DESCRIPTION",
    "    Selects an index box of the rectangular understood field. The user",
    "    has to give the indexes of the edges of the box. The index of the",
    "    left edge may be greater then that of the right edge.",
    "",
    "PARAMETER",
    "    idx1   INTEGER  Index of first longitude",
    "    idx2   INTEGER  Index of last longitude",
    "    idy1   INTEGER  Index of first latitude",
    "    idy2   INTEGER  Index of last latitude",
    "",
    "SEE ALSO",
    "    sellonlatbox",
    "",
    "@End_selindexbox",
    NULL
};

static char *SetmissHelp[] = {
    "@Begin_setmissval",
    "NAME",
    "    setmissval - Set a new missing value",
    "",
    "SYNOPSIS",
    "    setmissval,miss  ifile ofile",
    "",
    "DESCRIPTION",
    "             / miss   if i(t,x) EQ miss",
    "    o(t,x) = ",
    "             \\ i(t,x) if i(t,x) NE miss",
    "",
    "PARAMETER",
    "    miss   FLOAT  New missing value",
    "",
    "SEE ALSO",
    "    setctomiss, setmisstoc, setrtomiss",
    "",
    "@End_setmissval",
    "@Begin_setctomiss",
    "NAME",
    "    setctomiss - Set constant to missing value",
    "",
    "SYNOPSIS",
    "    setctomiss,c  ifile ofile",
    "",
    "DESCRIPTION",
    "             / miss   if i(t,x) EQ c",
    "    o(t,x) = ",
    "             \\ i(t,x) if i(t,x) NE c",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    setmissval, setmisstoc, setrtomiss",
    "",
    "@End_setctomiss",
    "@Begin_setmisstoc",
    "NAME",
    "    setmisstoc - Set missing value to constant",
    "",
    "SYNOPSIS",
    "    setmisstoc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "             / c      if i(t,x) EQ miss",
    "    o(t,x) = ",
    "             \\ i(t,x) if i(t,x) NE miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    setmissval, setctomiss, setrtomiss",
    "",
    "@End_setmisstoc",
    "@Begin_setrtomiss",
    "NAME",
    "    setrtomiss - Set range to missing value",
    "",
    "SYNOPSIS",
    "    setrtomiss,rmin,rmax  ifile ofile",
    "",
    "DESCRIPTION",
    "             / miss   if i(t,x) GE rmin AND i(t,x) LE rmax",
    "    o(t,x) = ",
    "             \\ i(t,x) if i(t,x) LT rmin AND i(t,x) GT rmax",
    "",
    "PARAMETER",
    "    rmin   FLOAT  Lower bound",
    "    rmax   FLOAT  Upper bound",
    "",
    "SEE ALSO",
    "    setmissval, setctomiss, setmisstoc",
    "",
    "@End_setrtomiss",
    NULL
};

static char *TimsortHelp[] = {
    "@Begin_timsort",
    "NAME",
    "    timsort - Sort over the time",
    "",
    "SYNOPSIS",
    "    timsort  ifile ofile",
    "",
    "DESCRIPTION",
    "    Sorts for every field position the elements in ascending order.",
    "    After sorting it is",
    "    ",
    "    o(t_1,x) < o(t_2,x)      forall (t_1<t_2),x",
    "",
    "@End_timsort",
    NULL
};

static char *ExprHelp[] = {
    "@Begin_expr",
    "NAME",
    "    expr - Evaluate expressions",
    "",
    "SYNOPSIS",
    "    expr,instr  ifile ofile",
    "",
    "DESCRIPTION",
    "    This Operator arithmetically processes every timestep of ifile.",
    "    The processing instructions are read from the parameter.",
    "    Each individual assignment statement must end with a semi-colon.",
    "",
    "PARAMETER",
    "    instr   STRING  Processing instructions",
    "",
    "SEE ALSO",
    "    exprf",
    "",
    "@End_expr",
    "@Begin_exprf",
    "NAME",
    "    exprf - Evaluate expressions from script file",
    "",
    "SYNOPSIS",
    "    exprf,filename  ifile ofile",
    "",
    "DESCRIPTION",
    "    This Operator arithmetically processes every timestep of ifile.",
    "    Contrary to expr the processing instructions are read from a file.",
    "",
    "PARAMETER",
    "    filename   STRING  File with processing instructions",
    "",
    "SEE ALSO",
    "    expr",
    "",
    "@End_exprf",
    NULL
};

static char *ArithcHelp[] = {
    "@Begin_addc",
    "NAME",
    "    addc - Add by constant",
    "",
    "SYNOPSIS",
    "    addc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) + c",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    subc, mulc, divc",
    "",
    "@End_addc",
    "@Begin_subc",
    "NAME",
    "    subc - Subtract by constant",
    "",
    "SYNOPSIS",
    "    subc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) - c",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    addc, mulc, divc",
    "",
    "@End_subc",
    "@Begin_mulc",
    "NAME",
    "    mulc - Multiply by constant",
    "",
    "SYNOPSIS",
    "    mulc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) * c",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    addc, subc, divc",
    "",
    "@End_mulc",
    "@Begin_divc",
    "NAME",
    "    divc - Divide by constant",
    "",
    "SYNOPSIS",
    "    divc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) / c",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    addc, subc, mulc",
    "",
    "@End_divc",
    NULL
};

static char *ArithHelp[] = {
    "@Begin_add",
    "NAME",
    "    add - Add two fields",
    "",
    "SYNOPSIS",
    "    add  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i_1(t,x) + i_2(t,x)",
    "",
    "SEE ALSO",
    "    sub, mul, div, min, max",
    "",
    "@End_add",
    "@Begin_sub",
    "NAME",
    "    sub - Subtract two fields",
    "",
    "SYNOPSIS",
    "    sub  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i_1(t,x) - i_2(t,x)",
    "",
    "SEE ALSO",
    "    add, mul, div, min, max",
    "",
    "@End_sub",
    "@Begin_mul",
    "NAME",
    "    mul - Multiply two fields",
    "",
    "SYNOPSIS",
    "    mul  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i_1(t,x) * i_2(t,x)",
    "",
    "SEE ALSO",
    "    add, sub, div, min, max",
    "",
    "@End_mul",
    "@Begin_div",
    "NAME",
    "    div - Divide two fields",
    "",
    "SYNOPSIS",
    "    div  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i_1(t,x) / i_2(t,x)",
    "",
    "SEE ALSO",
    "    add, sub, mul, min, max",
    "",
    "@End_div",
    "@Begin_min",
    "NAME",
    "    min - Minimum of two fields",
    "",
    "SYNOPSIS",
    "    min  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = MIN(i_1(t,x), i_2(t,x))",
    "",
    "SEE ALSO",
    "    add, sub, mul, div, max",
    "",
    "@End_min",
    "@Begin_max",
    "NAME",
    "    max - Maximum of two fields",
    "",
    "SYNOPSIS",
    "    max  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = MAX(i_1(t,x), i_2(t,x))",
    "",
    "SEE ALSO",
    "    add, sub, mul, div, min",
    "",
    "@End_max",
    NULL
};

static char *YmonarithHelp[] = {
    "@Begin_ymonadd",
    "NAME",
    "    ymonadd - Add multi-year monthly time averages",
    "",
    "SYNOPSIS",
    "    ymonadd  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    Add a time series and a multi-year monthly time averages.",
    "",
    "SEE ALSO",
    "    ymonsub, ymonmul, ymondiv",
    "",
    "@End_ymonadd",
    "@Begin_ymonsub",
    "NAME",
    "    ymonsub - Subtract multi-year monthly time averages",
    "",
    "SYNOPSIS",
    "    ymonsub  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    Subtract a time series and a multi-year monthly time averages.",
    "",
    "SEE ALSO",
    "    ymonadd, ymonmul, ymondiv",
    "",
    "@End_ymonsub",
    "@Begin_ymonmul",
    "NAME",
    "    ymonmul - Multiply multi-year monthly time averages",
    "",
    "SYNOPSIS",
    "    ymonmul  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    Multiply a time series and a multi-year monthly time averages.",
    "",
    "SEE ALSO",
    "    ymonadd, ymonsub, ymondiv",
    "",
    "@End_ymonmul",
    "@Begin_ymondiv",
    "NAME",
    "    ymondiv - Divide multi-year monthly time averages",
    "",
    "SYNOPSIS",
    "    ymondiv  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    Divide a time series and a multi-year monthly time averages.",
    "",
    "SEE ALSO",
    "    ymonadd, ymonsub, ymonmul",
    "",
    "@End_ymondiv",
    NULL
};

static char *ArithdaysHelp[] = {
    "@Begin_muldpm",
    "NAME",
    "    muldpm - Multiply with days per month",
    "",
    "SYNOPSIS",
    "    muldpm  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) * days\\_per\\_month",
    "",
    "SEE ALSO",
    "    divdpm, muldpy, divdpy",
    "",
    "@End_muldpm",
    "@Begin_divdpm",
    "NAME",
    "    divdpm - Divide by days per month",
    "",
    "SYNOPSIS",
    "    divdpm  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) / days\\_per\\_month",
    "",
    "SEE ALSO",
    "    muldpm, muldpy, divdpy",
    "",
    "@End_divdpm",
    "@Begin_muldpy",
    "NAME",
    "    muldpy - Multiply with days per year",
    "",
    "SYNOPSIS",
    "    muldpy  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) * days\\_per\\_year",
    "",
    "SEE ALSO",
    "    muldpm, divdpm, divdpy",
    "",
    "@End_muldpy",
    "@Begin_divdpy",
    "NAME",
    "    divdpy - Divide by days per year",
    "",
    "SYNOPSIS",
    "    divdpy  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = i(t,x) / days\\_per\\_year",
    "",
    "SEE ALSO",
    "    muldpm, divdpm, muldpy",
    "",
    "@End_divdpy",
    NULL
};

static char *MathHelp[] = {
    "@Begin_sqr",
    "NAME",
    "    sqr - Square",
    "",
    "SYNOPSIS",
    "    sqr  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the value of i(t,x) raised to the power of 2.",
    "",
    "SEE ALSO",
    "    sqrt, exp, log, log10, sin, cos, tan, asin, acos, atan",
    "",
    "@End_sqr",
    "@Begin_sqrt",
    "NAME",
    "    sqrt - Square root",
    "",
    "SYNOPSIS",
    "    sqrt  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the non-negative square root of i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, exp, log, log10, sin, cos, tan, asin, acos, atan",
    "",
    "@End_sqrt",
    "@Begin_exp",
    "NAME",
    "    exp - Exp",
    "",
    "SYNOPSIS",
    "    exp  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates e (the base of natural logarithms) raised to the power of i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, sqrt, log, log10, sin, cos, tan, asin, acos, atan",
    "",
    "@End_exp",
    "@Begin_log",
    "NAME",
    "    log - Logarithm",
    "",
    "SYNOPSIS",
    "    log  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the natural logarithm of i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log10, sin, cos, tan, asin, acos, atan",
    "",
    "@End_log",
    "@Begin_log10",
    "NAME",
    "    log10 - Logarithm base 10",
    "",
    "SYNOPSIS",
    "    log10  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the base-10 logarithm of i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, sin, cos, tan, asin, acos, atan",
    "",
    "@End_log10",
    "@Begin_sin",
    "NAME",
    "    sin - Sine",
    "",
    "SYNOPSIS",
    "    sin  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the sine of i(t,x), where i(t,x) is given in radians.",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, log10, cos, tan, asin, acos, atan",
    "",
    "@End_sin",
    "@Begin_cos",
    "NAME",
    "    cos - Cosine",
    "",
    "SYNOPSIS",
    "    cos  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the cosine of i(t,x), where i(t,x) is given in radians.",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, log10, sin, tan, asin, acos, atan",
    "",
    "@End_cos",
    "@Begin_tan",
    "NAME",
    "    tan - Tangent",
    "",
    "SYNOPSIS",
    "    tan  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the tangent of i(t,x), where i(t,x) is given in radians.",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, log10, sin, cos, asin, acos, atan",
    "",
    "@End_tan",
    "@Begin_asin",
    "NAME",
    "    asin - Arcus sine",
    "",
    "SYNOPSIS",
    "    asin  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the arcus sine of i(t,x); that is the value whose sine is i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, log10, sin, cos, tan, acos, atan",
    "",
    "@End_asin",
    "@Begin_acos",
    "NAME",
    "    acos - Arcus cosine",
    "",
    "SYNOPSIS",
    "    acos  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the arcus cosine of i(t,x); that is the value whose cosine is i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, log10, sin, cos, tan, asin, atan",
    "",
    "@End_acos",
    "@Begin_atan",
    "NAME",
    "    atan - Arcus tangent",
    "",
    "SYNOPSIS",
    "    atan  ifile ofile",
    "",
    "DESCRIPTION",
    "    Calculates the arcus tangent of i(t,x); that is the value whose tangent is i(t,x).",
    "",
    "SEE ALSO",
    "    sqr, sqrt, exp, log, log10, sin, cos, tan, asin, acos",
    "",
    "@End_atan",
    NULL
};

static char *CompHelp[] = {
    "@Begin_eq",
    "NAME",
    "    eq - Equal",
    "",
    "SYNOPSIS",
    "    eq  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i_1(t,x) EQ i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "    o(t,x) = <    0   if i_1(t,x) NE i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "              \\  miss if i_1(t,x) EQ miss      OR   i_2(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    ne, le, lt, ge, gt",
    "",
    "@End_eq",
    "@Begin_ne",
    "NAME",
    "    ne - Not equal",
    "",
    "SYNOPSIS",
    "    ne  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i_1(t,x) NE i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "    o(t,x) = <    0   if i_1(t,x) EQ i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "              \\  miss if i_1(t,x) EQ miss      OR   i_2(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    eq, le, lt, ge, gt",
    "",
    "@End_ne",
    "@Begin_le",
    "NAME",
    "    le - Less equal",
    "",
    "SYNOPSIS",
    "    le  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i_1(t,x) LE i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "    o(t,x) = <    0   if i_1(t,x) GT i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "              \\  miss if i_1(t,x) EQ miss      OR   i_2(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    eq, ne, lt, ge, gt",
    "",
    "@End_le",
    "@Begin_lt",
    "NAME",
    "    lt - Less then",
    "",
    "SYNOPSIS",
    "    lt  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i_1(t,x) LT i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "    o(t,x) = <    0   if i_1(t,x) GE i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "              \\  miss if i_1(t,x) EQ miss      OR   i_2(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    eq, ne, le, ge, gt",
    "",
    "@End_lt",
    "@Begin_ge",
    "NAME",
    "    ge - Greater equal",
    "",
    "SYNOPSIS",
    "    ge  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i_1(t,x) GE i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "    o(t,x) = <    0   if i_1(t,x) LT i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "              \\  miss if i_1(t,x) EQ miss      OR   i_2(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    eq, ne, le, lt, gt",
    "",
    "@End_ge",
    "@Begin_gt",
    "NAME",
    "    gt - Greater then",
    "",
    "SYNOPSIS",
    "    gt  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i_1(t,x) GT i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "    o(t,x) = <    0   if i_1(t,x) LE i_2(t,x)  AND  i_1(t,x),i_2(t,x) NE miss",
    "              \\  miss if i_1(t,x) EQ miss      OR   i_2(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    eq, ne, le, lt, ge",
    "",
    "@End_gt",
    NULL
};

static char *CompcHelp[] = {
    "@Begin_eqc",
    "NAME",
    "    eqc - Equal constant",
    "",
    "SYNOPSIS",
    "    eqc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i(t,x) EQ c     AND  i(t,x),c NE miss",
    "    o(t,x) = <    0   if i(t,x) NE c     AND  i(t,x),c NE miss",
    "              \\  miss if i(t,x) EQ miss  OR   c EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    nec, lec, ltc, gec, gtc",
    "",
    "@End_eqc",
    "@Begin_nec",
    "NAME",
    "    nec - Not equal constant",
    "",
    "SYNOPSIS",
    "    nec,c  ifile ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i(t,x) NE c     AND  i(t,x),c NE miss",
    "    o(t,x) = <    0   if i(t,x) EQ c     AND  i(t,x),c NE miss",
    "              \\  miss if i(t,x) EQ miss  OR   c EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    eqc, lec, ltc, gec, gtc",
    "",
    "@End_nec",
    "@Begin_lec",
    "NAME",
    "    lec - Less equal constant",
    "",
    "SYNOPSIS",
    "    lec,c  ifile ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i(t,x) LE c     AND  i(t,x),c NE miss",
    "    o(t,x) = <    0   if i(t,x) GT c     AND  i(t,x),c NE miss",
    "              \\  miss if i(t,x) EQ miss  OR   c EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    eqc, nec, ltc, gec, gtc",
    "",
    "@End_lec",
    "@Begin_ltc",
    "NAME",
    "    ltc - Less then constant",
    "",
    "SYNOPSIS",
    "    ltc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i(t,x) LT c     AND  i(t,x),c NE miss",
    "    o(t,x) = <    0   if i(t,x) GE c     AND  i(t,x),c NE miss",
    "              \\  miss if i(t,x) EQ miss  OR   c EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    eqc, nec, lec, gec, gtc",
    "",
    "@End_ltc",
    "@Begin_gec",
    "NAME",
    "    gec - Greater equal constant",
    "",
    "SYNOPSIS",
    "    gec,c  ifile ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i(t,x) GE c     AND  i(t,x),c NE miss",
    "    o(t,x) = <    0   if i(t,x) LT c     AND  i(t,x),c NE miss",
    "              \\  miss if i(t,x) EQ miss  OR   c EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    eqc, nec, lec, ltc, gtc",
    "",
    "@End_gec",
    "@Begin_gtc",
    "NAME",
    "    gtc - Greater then constant",
    "",
    "SYNOPSIS",
    "    gtc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "              /   1   if i(t,x) GT c     AND  i(t,x),c NE miss",
    "    o(t,x) = <    0   if i(t,x) LE c     AND  i(t,x),c NE miss",
    "              \\  miss if i(t,x) EQ miss  OR   c EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    eqc, nec, lec, ltc, gec",
    "",
    "@End_gtc",
    NULL
};

static char *CondHelp[] = {
    "@Begin_ifthen",
    "NAME",
    "    ifthen - If then",
    "",
    "SYNOPSIS",
    "    ifthen  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "             / i_2(t,x) if i_1(t,x) NE 0  AND  i_1(t,x) NE miss",
    "    o(t,x) =",
    "             \\ miss     if i_1(t,x) EQ 0  OR   i_1(t,x) EQ miss",
    "",
    "SEE ALSO",
    "    ifnotthen",
    "",
    "@End_ifthen",
    "@Begin_ifnotthen",
    "NAME",
    "    ifnotthen - If not then",
    "",
    "SYNOPSIS",
    "    ifnotthen  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "             / i_2(t,x) if i_1(t,x) EQ 0  AND  i_1(t,x) NE miss",
    "    o(t,x) = ",
    "             \\ miss     if i_1(t,x) NE 0  OR   i_1(t,x) EQ miss",
    "    ",
    "",
    "SEE ALSO",
    "    ifthen",
    "",
    "@End_ifnotthen",
    NULL
};

static char *Cond2Help[] = {
    "@Begin_ifthenelse",
    "NAME",
    "    ifthenelse - If then else",
    "",
    "SYNOPSIS",
    "    ifthenelse  ifile1 ifile2 ifile3 ofile",
    "",
    "DESCRIPTION",
    "              / i_2(t,x) if i_1(t,x) NE 0  AND  i_1(t,x) NE miss",
    "    o(t,x) = <  i_3(t,x) if i_1(t,x) EQ 0  AND  i_1(t,x) NE miss",
    "              \\ miss     if i_1(t,x) EQ miss",
    "",
    "@End_ifthenelse",
    NULL
};

static char *CondcHelp[] = {
    "@Begin_ifthenc",
    "NAME",
    "    ifthenc - If then constant",
    "",
    "SYNOPSIS",
    "    ifthenc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "             / c      if i(t,x) NE 0  AND  i(t,x) NE miss",
    "    o(t,x) =",
    "             \\ miss   if i(t,x) EQ 0  OR   i(t,x) EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    ifnotthenc",
    "",
    "@End_ifthenc",
    "@Begin_ifnotthenc",
    "NAME",
    "    ifnotthenc - If not then constant",
    "",
    "SYNOPSIS",
    "    ifnotthenc,c  ifile ofile",
    "",
    "DESCRIPTION",
    "             / c      if i(t,x) EQ 0  AND  i(t,x) NE miss",
    "    o(t,x) =",
    "             \\ miss   if i(t,x) NE 0  OR   i(t,x) EQ miss",
    "",
    "PARAMETER",
    "    c   FLOAT  Constant",
    "",
    "SEE ALSO",
    "    ifthenc",
    "",
    "@End_ifnotthenc",
    NULL
};

static char *FldstatHelp[] = {
    "@Begin_fldmin",
    "NAME",
    "    fldmin - Field minimum",
    "",
    "SYNOPSIS",
    "    fldmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = min{i(t',x'), t'=t}",
    "",
    "SEE ALSO",
    "    fldmax, fldsum, fldmean, fldavg, fldstd, fldvar",
    "",
    "@End_fldmin",
    "@Begin_fldmax",
    "NAME",
    "    fldmax - Field maximum",
    "",
    "SYNOPSIS",
    "    fldmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = max{i(t',x'), t'=t}",
    "",
    "SEE ALSO",
    "    fldmin, fldsum, fldmean, fldavg, fldstd, fldvar",
    "",
    "@End_fldmax",
    "@Begin_fldsum",
    "NAME",
    "    fldsum - Field sum",
    "",
    "SYNOPSIS",
    "    fldsum  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = sum{i(t,x)}",
    "",
    "SEE ALSO",
    "    fldmin, fldmax, fldmean, fldavg, fldstd, fldvar",
    "",
    "@End_fldsum",
    "@Begin_fldmean",
    "NAME",
    "    fldmean - Field mean",
    "",
    "SYNOPSIS",
    "    fldmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = mean{i(t',x'), t'=t}",
    "    weighted by area weights obtained by the input field.",
    "",
    "SEE ALSO",
    "    fldmin, fldmax, fldsum, fldavg, fldstd, fldvar",
    "",
    "@End_fldmean",
    "@Begin_fldavg",
    "NAME",
    "    fldavg - Field average",
    "",
    "SYNOPSIS",
    "    fldavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = avg{i(t',x'), t'=t}",
    "    weighted by area weights obtained by the input field.",
    "",
    "SEE ALSO",
    "    fldmin, fldmax, fldsum, fldmean, fldstd, fldvar",
    "",
    "@End_fldavg",
    "@Begin_fldstd",
    "NAME",
    "    fldstd - Field standard deviation",
    "",
    "SYNOPSIS",
    "    fldstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = sqrt{var{i(t',x'), t'=t}}",
    "    weighted by area weights obtained by the input field.",
    "",
    "SEE ALSO",
    "    fldmin, fldmax, fldsum, fldmean, fldavg, fldvar",
    "",
    "@End_fldstd",
    "@Begin_fldvar",
    "NAME",
    "    fldvar - Field variance",
    "",
    "SYNOPSIS",
    "    fldvar  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,1) = var{i(t',x'), t'=t}",
    "    weighted by area weights obtained by the input field.",
    "",
    "SEE ALSO",
    "    fldmin, fldmax, fldsum, fldmean, fldavg, fldstd",
    "",
    "@End_fldvar",
    NULL
};

static char *ZonstatHelp[] = {
    "@Begin_zonmin",
    "NAME",
    "    zonmin - Zonal minimum",
    "",
    "SYNOPSIS",
    "    zonmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the minimum over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmax, zonsum, zonmean, zonavg, zonstd, zonvar",
    "",
    "@End_zonmin",
    "@Begin_zonmax",
    "NAME",
    "    zonmax - Zonal maximum",
    "",
    "SYNOPSIS",
    "    zonmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the maximum over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmin, zonsum, zonmean, zonavg, zonstd, zonvar",
    "",
    "@End_zonmax",
    "@Begin_zonsum",
    "NAME",
    "    zonsum - Zonal sum",
    "",
    "SYNOPSIS",
    "    zonsum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the sum over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmin, zonmax, zonmean, zonavg, zonstd, zonvar",
    "",
    "@End_zonsum",
    "@Begin_zonmean",
    "NAME",
    "    zonmean - Zonal mean",
    "",
    "SYNOPSIS",
    "    zonmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the mean over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmin, zonmax, zonsum, zonavg, zonstd, zonvar",
    "",
    "@End_zonmean",
    "@Begin_zonavg",
    "NAME",
    "    zonavg - Zonal average",
    "",
    "SYNOPSIS",
    "    zonavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the average over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmin, zonmax, zonsum, zonmean, zonstd, zonvar",
    "",
    "@End_zonavg",
    "@Begin_zonstd",
    "NAME",
    "    zonstd - Zonal standard deviation",
    "",
    "SYNOPSIS",
    "    zonstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the standard deviation over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmin, zonmax, zonsum, zonmean, zonavg, zonvar",
    "",
    "@End_zonstd",
    "@Begin_zonvar",
    "NAME",
    "    zonvar - Zonal variance",
    "",
    "SYNOPSIS",
    "    zonvar  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every latitude the variance over all longitudes is computed.",
    "",
    "SEE ALSO",
    "    zonmin, zonmax, zonsum, zonmean, zonavg, zonstd",
    "",
    "@End_zonvar",
    NULL
};

static char *MerstatHelp[] = {
    "@Begin_mermin",
    "NAME",
    "    mermin - Meridional minimum",
    "",
    "SYNOPSIS",
    "    mermin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the minimum over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermax, mersum, mermean, meravg, merstd, mervar",
    "",
    "@End_mermin",
    "@Begin_mermax",
    "NAME",
    "    mermax - Meridional maximum",
    "",
    "SYNOPSIS",
    "    mermax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the maximum over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermin, mersum, mermean, meravg, merstd, mervar",
    "",
    "@End_mermax",
    "@Begin_mersum",
    "NAME",
    "    mersum - Meridional sum",
    "",
    "SYNOPSIS",
    "    mersum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the sum over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermin, mermax, mermean, meravg, merstd, mervar",
    "",
    "@End_mersum",
    "@Begin_mermean",
    "NAME",
    "    mermean - Meridional mean",
    "",
    "SYNOPSIS",
    "    mermean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the mean over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermin, mermax, mersum, meravg, merstd, mervar",
    "",
    "@End_mermean",
    "@Begin_meravg",
    "NAME",
    "    meravg - Meridional average",
    "",
    "SYNOPSIS",
    "    meravg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the average over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermin, mermax, mersum, mermean, merstd, mervar",
    "",
    "@End_meravg",
    "@Begin_merstd",
    "NAME",
    "    merstd - Meridional standard deviation",
    "",
    "SYNOPSIS",
    "    merstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the standard deviation over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermin, mermax, mersum, mermean, meravg, mervar",
    "",
    "@End_merstd",
    "@Begin_mervar",
    "NAME",
    "    mervar - Meridional variance",
    "",
    "SYNOPSIS",
    "    mervar  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every longitude the variance over all latitudes is computed.",
    "",
    "SEE ALSO",
    "    mermin, mermax, mersum, mermean, meravg, merstd",
    "",
    "@End_mervar",
    NULL
};

static char *VertstatHelp[] = {
    "@Begin_vertmin",
    "NAME",
    "    vertmin - Vertical minimum",
    "",
    "SYNOPSIS",
    "    vertmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every gridpoint the minimum over all levels is computed.",
    "",
    "SEE ALSO",
    "    vertmax, vertsum, vertmean, vertavg, vertstd",
    "",
    "@End_vertmin",
    "@Begin_vertmax",
    "NAME",
    "    vertmax - Vertical maximum",
    "",
    "SYNOPSIS",
    "    vertmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every gridpoint the maximum over all levels is computed.",
    "",
    "SEE ALSO",
    "    vertmin, vertsum, vertmean, vertavg, vertstd",
    "",
    "@End_vertmax",
    "@Begin_vertsum",
    "NAME",
    "    vertsum - Vertical sum",
    "",
    "SYNOPSIS",
    "    vertsum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every gridpoint the sum over all levels is computed.",
    "",
    "SEE ALSO",
    "    vertmin, vertmax, vertmean, vertavg, vertstd",
    "",
    "@End_vertsum",
    "@Begin_vertmean",
    "NAME",
    "    vertmean - Vertical mean",
    "",
    "SYNOPSIS",
    "    vertmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every gridpoint the mean over all levels is computed.",
    "",
    "SEE ALSO",
    "    vertmin, vertmax, vertsum, vertavg, vertstd",
    "",
    "@End_vertmean",
    "@Begin_vertavg",
    "NAME",
    "    vertavg - Vertical average",
    "",
    "SYNOPSIS",
    "    vertavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every gridpoint the average over all levels is computed.",
    "",
    "SEE ALSO",
    "    vertmin, vertmax, vertsum, vertmean, vertstd",
    "",
    "@End_vertavg",
    "@Begin_vertstd",
    "NAME",
    "    vertstd - Vertical standard deviation",
    "",
    "SYNOPSIS",
    "    vertstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every gridpoint the standard deviation over all levels is computed.",
    "",
    "SEE ALSO",
    "    vertmin, vertmax, vertsum, vertmean, vertavg",
    "",
    "@End_vertstd",
    NULL
};

static char *TimstatHelp[] = {
    "@Begin_timmin",
    "NAME",
    "    timmin - Time minimum",
    "",
    "SYNOPSIS",
    "    timmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = min{i(t',x'), x'=x}",
    "",
    "SEE ALSO",
    "    timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_timmin",
    "@Begin_timmax",
    "NAME",
    "    timmax - Time maximum",
    "",
    "SYNOPSIS",
    "    timmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = max{i(t',x'), x'=x}",
    "",
    "SEE ALSO",
    "    timmin, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_timmax",
    "@Begin_timsum",
    "NAME",
    "    timsum - Time sum",
    "",
    "SYNOPSIS",
    "    timsum  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = sum{i(t,x)}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timmean, timavg, timstd, hourmin, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_timsum",
    "@Begin_timmean",
    "NAME",
    "    timmean - Time mean",
    "",
    "SYNOPSIS",
    "    timmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = mean{i(t',x'), x'=x}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timavg, timstd, hourmin, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_timmean",
    "@Begin_timavg",
    "NAME",
    "    timavg - Time average",
    "",
    "SYNOPSIS",
    "    timavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = avg{i(t',x'), x'=x}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timstd, hourmin, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_timavg",
    "@Begin_timstd",
    "NAME",
    "    timstd - Time standard deviation",
    "",
    "SYNOPSIS",
    "    timstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = sqrt{var{i(t',x'), x'=x}}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, hourmin, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_timstd",
    "@Begin_hourmin",
    "NAME",
    "    hourmin - Hourly minimum",
    "",
    "SYNOPSIS",
    "    hourmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same hour, it is",
    "    ",
    "    o(t,x) = min{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmax, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_hourmin",
    "@Begin_hourmax",
    "NAME",
    "    hourmax - Hourly maximum",
    "",
    "SYNOPSIS",
    "    hourmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same hour, it is",
    "    ",
    "    o(t,x) = max{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hoursum, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_hourmax",
    "@Begin_hoursum",
    "NAME",
    "    hoursum - Hourly sum",
    "",
    "SYNOPSIS",
    "    hoursum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same hour, it is",
    "    ",
    "    o(t,x) = sum{i(t',x)}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hourmean,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_hoursum",
    "@Begin_hourmean",
    "NAME",
    "    hourmean - Hourly mean",
    "",
    "SYNOPSIS",
    "    hourmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = mean{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_hourmean",
    "@Begin_houravg",
    "NAME",
    "    houravg - Hourly average",
    "",
    "SYNOPSIS",
    "    houravg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = avg{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_houravg",
    "@Begin_hourstd",
    "NAME",
    "    hourstd - Hourly standard deviation",
    "",
    "SYNOPSIS",
    "    hourstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same hour, it is",
    "    ",
    "    o(t,x) = sqrt{var{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, daymin, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_hourstd",
    "@Begin_daymin",
    "NAME",
    "    daymin - Daily minimum",
    "",
    "SYNOPSIS",
    "    daymin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = min{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymax, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_daymin",
    "@Begin_daymax",
    "NAME",
    "    daymax - Daily maximum",
    "",
    "SYNOPSIS",
    "    daymax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = max{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daysum, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_daymax",
    "@Begin_daysum",
    "NAME",
    "    daysum - Daily sum",
    "",
    "SYNOPSIS",
    "    daysum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = sum{i(t',x)}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daymean, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_daysum",
    "@Begin_daymean",
    "NAME",
    "    daymean - Daily mean",
    "",
    "SYNOPSIS",
    "    daymean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = mean{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, dayavg, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_daymean",
    "@Begin_dayavg",
    "NAME",
    "    dayavg - Daily average",
    "",
    "SYNOPSIS",
    "    dayavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = avg{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, daystd, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_dayavg",
    "@Begin_daystd",
    "NAME",
    "    daystd - Daily standard deviation",
    "",
    "SYNOPSIS",
    "    daystd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same day, it is",
    "    ",
    "    o(t,x) = sqrt{var{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, monmin,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_daystd",
    "@Begin_monmin",
    "NAME",
    "    monmin - Monthly minimum",
    "",
    "SYNOPSIS",
    "    monmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = min{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_monmin",
    "@Begin_monmax",
    "NAME",
    "    monmax - Monthly maximum",
    "",
    "SYNOPSIS",
    "    monmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = max{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_monmax",
    "@Begin_monsum",
    "NAME",
    "    monsum - Monthly sum",
    "",
    "SYNOPSIS",
    "    monsum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = sum{i(t',x)}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monmean, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_monsum",
    "@Begin_monmean",
    "NAME",
    "    monmean - Monthly mean",
    "",
    "SYNOPSIS",
    "    monmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = mean{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monavg, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_monmean",
    "@Begin_monavg",
    "NAME",
    "    monavg - Monthly average",
    "",
    "SYNOPSIS",
    "    monavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = avg{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monstd, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_monavg",
    "@Begin_monstd",
    "NAME",
    "    monstd - Monthly standard deviation",
    "",
    "SYNOPSIS",
    "    monstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same month, it is",
    "    ",
    "    o(t,x) = sqrt{var{i(t',x), t_1 < t' <= t_n}}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, yearmin, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_monstd",
    "@Begin_yearmin",
    "NAME",
    "    yearmin - Yearly minimum",
    "",
    "SYNOPSIS",
    "    yearmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same year, it is",
    "    ",
    "    o(t,x) = min{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, monstd, yearmax, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_yearmin",
    "@Begin_yearmax",
    "NAME",
    "    yearmax - Yearly maximum",
    "",
    "SYNOPSIS",
    "    yearmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same year, it is",
    "    ",
    "    o(t,x) = max{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, monstd, yearmin, yearsum, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_yearmax",
    "@Begin_yearsum",
    "NAME",
    "    yearsum - Yearly sum",
    "",
    "SYNOPSIS",
    "    yearsum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same year, it is",
    "    ",
    "    o(t,x) = sum{i(t',x)}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearmean,",
    "    yearavg, yearstd",
    "",
    "@End_yearsum",
    "@Begin_yearmean",
    "NAME",
    "    yearmean - Yearly mean",
    "",
    "SYNOPSIS",
    "    yearmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same year, it is",
    "    ",
    "    o(t,x) = mean{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum,",
    "    yearavg, yearstd",
    "",
    "@End_yearmean",
    "@Begin_yearavg",
    "NAME",
    "    yearavg - Yearly average",
    "",
    "SYNOPSIS",
    "    yearavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same year, it is",
    "    ",
    "    o(t,x) = avg{i(t',x), t_1<t'<=t_n}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum,",
    "    yearmean, yearstd",
    "",
    "@End_yearavg",
    "@Begin_yearstd",
    "NAME",
    "    yearstd - Yearly standard deviation",
    "",
    "SYNOPSIS",
    "    yearstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t_1, ...,t_n of field of the same year, it is",
    "    ",
    "    o(t,x) = sqrt{var{i(t',x), t_1 < t' <= t_n}}",
    "",
    "SEE ALSO",
    "    timmin, timmax, timsum, timmean, timavg, timstd, hourmin, hourmax, hoursum,",
    "    hourmean, houravg, hourstd, daymin, daymax, daysum, daymean, dayavg, daystd,",
    "    monmin, monmax, monsum, monmean, monavg, monstd, yearmin, yearmax, yearsum,",
    "    yearmean, yearavg",
    "",
    "@End_yearstd",
    NULL
};

static char *SelstatHelp[] = {
    "@Begin_selmin",
    "NAME",
    "    selmin - Time range minimum",
    "",
    "SYNOPSIS",
    "    selmin,nsets,[noffset],[nskip]  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    selected time range, it is",
    "    ",
    "    o(t,x) = min{i(t',x), t1 < t' <= tn}",
    "",
    "PARAMETER",
    "    nsets     INTEGER  Number of input timesteps for each output timestep",
    "    noffset   INTEGER  Number of input timesteps skipped before the first timestep range (optional)",
    "    nskip     INTEGER  Number of input timesteps skipped between timestep ranges (optional)",
    "",
    "SEE ALSO",
    "    selmax, selsum, selmean, selavg, selstd",
    "",
    "@End_selmin",
    "@Begin_selmax",
    "NAME",
    "    selmax - Time range maximum",
    "",
    "SYNOPSIS",
    "    selmax,nsets,[noffset],[nskip]  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    selected time range, it is",
    "    ",
    "    o(t,x) = max{i(t',x), t1 < t' <= tn}",
    "",
    "PARAMETER",
    "    nsets     INTEGER  Number of input timesteps for each output timestep",
    "    noffset   INTEGER  Number of input timesteps skipped before the first timestep range (optional)",
    "    nskip     INTEGER  Number of input timesteps skipped between timestep ranges (optional)",
    "",
    "SEE ALSO",
    "    selmin, selsum, selmean, selavg, selstd",
    "",
    "@End_selmax",
    "@Begin_selsum",
    "NAME",
    "    selsum - Time range sum",
    "",
    "SYNOPSIS",
    "    selsum,nsets,[noffset],[nskip]  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    selected time range, it is",
    "    ",
    "    o(t,x) = sum{i(t',x), t1 < t' <= tn}",
    "",
    "PARAMETER",
    "    nsets     INTEGER  Number of input timesteps for each output timestep",
    "    noffset   INTEGER  Number of input timesteps skipped before the first timestep range (optional)",
    "    nskip     INTEGER  Number of input timesteps skipped between timestep ranges (optional)",
    "",
    "SEE ALSO",
    "    selmin, selmax, selmean, selavg, selstd",
    "",
    "@End_selsum",
    "@Begin_selmean",
    "NAME",
    "    selmean - Time range mean",
    "",
    "SYNOPSIS",
    "    selmean,nsets,[noffset],[nskip]  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    selected time range, it is",
    "    ",
    "    o(t,x) = mean{i(t',x), t1 < t' <= tn}",
    "",
    "PARAMETER",
    "    nsets     INTEGER  Number of input timesteps for each output timestep",
    "    noffset   INTEGER  Number of input timesteps skipped before the first timestep range (optional)",
    "    nskip     INTEGER  Number of input timesteps skipped between timestep ranges (optional)",
    "",
    "SEE ALSO",
    "    selmin, selmax, selsum, selavg, selstd",
    "",
    "@End_selmean",
    "@Begin_selavg",
    "NAME",
    "    selavg - Time range average",
    "",
    "SYNOPSIS",
    "    selavg,nsets,[noffset],[nskip]  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    selected time range, it is",
    "    ",
    "    o(t,x) = avg{i(t',x), t1 < t' <= tn}",
    "",
    "PARAMETER",
    "    nsets     INTEGER  Number of input timesteps for each output timestep",
    "    noffset   INTEGER  Number of input timesteps skipped before the first timestep range (optional)",
    "    nskip     INTEGER  Number of input timesteps skipped between timestep ranges (optional)",
    "",
    "SEE ALSO",
    "    selmin, selmax, selsum, selmean, selstd",
    "",
    "@End_selavg",
    "@Begin_selstd",
    "NAME",
    "    selstd - Time range standard deviation",
    "",
    "SYNOPSIS",
    "    selstd,nsets,[noffset],[nskip]  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    selected time range, it is",
    "    ",
    "    o(t,x) = sqrt{var{i(t',x), t1 < t' <= tn}}",
    "",
    "PARAMETER",
    "    nsets     INTEGER  Number of input timesteps for each output timestep",
    "    noffset   INTEGER  Number of input timesteps skipped before the first timestep range (optional)",
    "    nskip     INTEGER  Number of input timesteps skipped between timestep ranges (optional)",
    "",
    "SEE ALSO",
    "    selmin, selmax, selsum, selmean, selavg",
    "",
    "@End_selstd",
    NULL
};

static char *SeasstatHelp[] = {
    "@Begin_seasmin",
    "NAME",
    "    seasmin - Seasonally minimum",
    "",
    "SYNOPSIS",
    "    seasmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    year and season, where december belongs to the northern hemispheric",
    "    winter of the next year, it is",
    "    ",
    "    o(t,x) = min{i(t',x), t1 < t' <= tn}",
    "    Be careful about the first and the last timestep, they may be incorrect",
    "    DJF values.",
    "",
    "SEE ALSO",
    "    seasmax, seassum, seasmean, seasavg, seasstd",
    "",
    "@End_seasmin",
    "@Begin_seasmax",
    "NAME",
    "    seasmax - Seasonally maximum",
    "",
    "SYNOPSIS",
    "    seasmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    year and season, where december belongs to the northern hemispheric",
    "    winter of the next year, it is",
    "    ",
    "    o(t,x) = max{i(t',x), t1 < t' <= tn}",
    "    Be careful about the first and the last timestep, they may be incorrect",
    "    DJF values.",
    "",
    "SEE ALSO",
    "    seasmin, seassum, seasmean, seasavg, seasstd",
    "",
    "@End_seasmax",
    "@Begin_seassum",
    "NAME",
    "    seassum - Seasonally sum",
    "",
    "SYNOPSIS",
    "    seassum  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    year and season, where december belongs to the northern hemispheric",
    "    winter of the next year, it is",
    "    ",
    "    o(t,x) = sum{i(t',x), t1 < t' <= tn}",
    "    Be careful about the first and the last timestep, they may be incorrect",
    "    DJF values.",
    "",
    "SEE ALSO",
    "    seasmin, seasmax, seasmean, seasavg, seasstd",
    "",
    "@End_seassum",
    "@Begin_seasmean",
    "NAME",
    "    seasmean - Seasonally mean",
    "",
    "SYNOPSIS",
    "    seasmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    year and season, where december belongs to the northern hemispheric",
    "    winter of the next year, it is",
    "    ",
    "    o(t,x) = mean{i(t',x), t1 < t' <= tn}",
    "    Be careful about the first and the last timestep, they may be incorrect",
    "    DJF values.",
    "",
    "SEE ALSO",
    "    seasmin, seasmax, seassum, seasavg, seasstd",
    "",
    "@End_seasmean",
    "@Begin_seasavg",
    "NAME",
    "    seasavg - Seasonally average",
    "",
    "SYNOPSIS",
    "    seasavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    year and season, where december belongs to the northern hemispheric",
    "    winter of the next year, it is",
    "    ",
    "    o(t,x) = avg{i(t',x), t1 < t' <= tn}",
    "    Be careful about the first and the last timestep, they may be incorrect",
    "    DJF values.",
    "",
    "SEE ALSO",
    "    seasmin, seasmax, seassum, seasmean, seasstd",
    "",
    "@End_seasavg",
    "@Begin_seasstd",
    "NAME",
    "    seasstd - Seasonally standard deviation",
    "",
    "SYNOPSIS",
    "    seasstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    For every adjacent sequence t1, ...., tn of timesteps of the same ",
    "    year and season, where december belongs to the northern hemispheric",
    "    winter of the next year, it is",
    "    ",
    "    o(t,x) = sqrt{var{i(t',x), t1 < t' <= tn}}",
    "    Be careful about the first and the last timestep, they may be incorrect",
    "    DJF values.",
    "",
    "SEE ALSO",
    "    seasmin, seasmax, seassum, seasmean, seasavg",
    "",
    "@End_seasstd",
    NULL
};

static char *YdaystatHelp[] = {
    "@Begin_ydaymin",
    "NAME",
    "    ydaymin - Multi-year daily minimum",
    "",
    "SYNOPSIS",
    "    ydaymin  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(001,x) = min{i(t,x), day(i(t)) = 001}",
    "                     ...",
    "    o(366,x) = min{i(t,x), day(i(t)) = 366}",
    "",
    "SEE ALSO",
    "    ydaymax, ydaymean, ydayavg, ydaystd",
    "",
    "@End_ydaymin",
    "@Begin_ydaymax",
    "NAME",
    "    ydaymax - Multi-year daily maximum",
    "",
    "SYNOPSIS",
    "    ydaymax  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(001,x) = max{i(t,x), day(i(t)) = 001}",
    "                     ...",
    "    o(366,x) = max{i(t,x), day(i(t)) = 366}",
    "",
    "SEE ALSO",
    "    ydaymin, ydaymean, ydayavg, ydaystd",
    "",
    "@End_ydaymax",
    "@Begin_ydaymean",
    "NAME",
    "    ydaymean - Multi-year daily mean",
    "",
    "SYNOPSIS",
    "    ydaymean  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(001,x) = mean{i(t,x), day(i(t)) = 001}",
    "                     ...",
    "    o(366,x) = mean{i(t,x), day(i(t)) = 366}",
    "",
    "SEE ALSO",
    "    ydaymin, ydaymax, ydayavg, ydaystd",
    "",
    "@End_ydaymean",
    "@Begin_ydayavg",
    "NAME",
    "    ydayavg - Multi-year daily average",
    "",
    "SYNOPSIS",
    "    ydayavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(001,x) = avg{i(t,x), day(i(t)) = 001}",
    "                     ...",
    "    o(366,x) = avg{i(t,x), day(i(t)) = 366}",
    "",
    "SEE ALSO",
    "    ydaymin, ydaymax, ydaymean, ydaystd",
    "",
    "@End_ydayavg",
    "@Begin_ydaystd",
    "NAME",
    "    ydaystd - Multi-year daily standard deviation",
    "",
    "SYNOPSIS",
    "    ydaystd  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(001,x) = sqrt{var{i(t,x), day(i(t)) = 001}}",
    "                     ...",
    "    o(366,x) = sqrt{var{i(t,x), day(i(t)) = 366}}",
    "",
    "SEE ALSO",
    "    ydaymin, ydaymax, ydaymean, ydayavg",
    "",
    "@End_ydaystd",
    NULL
};

static char *YmonstatHelp[] = {
    "@Begin_ymonmin",
    "NAME",
    "    ymonmin - Multi-year monthly minimum",
    "",
    "SYNOPSIS",
    "    ymonmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(01,x) = min{i(t,x), month(i(t)) = 01}",
    "                     ...",
    "    o(12,x) = min{i(t,x), month(i(t)) = 12}",
    "",
    "SEE ALSO",
    "    ymonmax, ymonmean, ymonavg, ymonstd",
    "",
    "@End_ymonmin",
    "@Begin_ymonmax",
    "NAME",
    "    ymonmax - Multi-year monthly maximum",
    "",
    "SYNOPSIS",
    "    ymonmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(01,x) = max{i(t,x), month(i(t)) = 01}",
    "                     ...",
    "    o(12,x) = max{i(t,x), month(i(t)) = 12}",
    "",
    "SEE ALSO",
    "    ymonmin, ymonmean, ymonavg, ymonstd",
    "",
    "@End_ymonmax",
    "@Begin_ymonmean",
    "NAME",
    "    ymonmean - Multi-year monthly mean",
    "",
    "SYNOPSIS",
    "    ymonmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(01,x) = mean{i(t,x), month(i(t)) = 01}",
    "                     ...",
    "    o(12,x) = mean{i(t,x), month(i(t)) = 12}",
    "",
    "SEE ALSO",
    "    ymonmin, ymonmax, ymonavg, ymonstd",
    "",
    "@End_ymonmean",
    "@Begin_ymonavg",
    "NAME",
    "    ymonavg - Multi-year monthly average",
    "",
    "SYNOPSIS",
    "    ymonavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(01,x) = avg{i(t,x), month(i(t)) = 01}",
    "                     ...",
    "    o(12,x) = avg{i(t,x), month(i(t)) = 12}",
    "",
    "SEE ALSO",
    "    ymonmin, ymonmax, ymonmean, ymonstd",
    "",
    "@End_ymonavg",
    "@Begin_ymonstd",
    "NAME",
    "    ymonstd - Multi-year monthly standard deviation",
    "",
    "SYNOPSIS",
    "    ymonstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(01,x) = sqrt{var{i(t,x), month(i(t)) = 01}}",
    "                     ...",
    "    o(12,x) = sqrt{var{i(t,x), month(i(t)) = 12}}",
    "",
    "SEE ALSO",
    "    ymonmin, ymonmax, ymonmean, ymonavg",
    "",
    "@End_ymonstd",
    NULL
};

static char *YseasstatHelp[] = {
    "@Begin_yseasmin",
    "NAME",
    "    yseasmin - Multi-year seasonally minimum",
    "",
    "SYNOPSIS",
    "    yseasmin  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = min{i(t,x), month(i(t)) = 12, 01, 02}",
    "    o(2,x) = min{i(t,x), month(i(t)) = 03, 04, 05}",
    "    o(3,x) = min{i(t,x), month(i(t)) = 06, 07, 08}",
    "    o(4,x) = min{i(t,x), month(i(t)) = 09, 10, 11}",
    "",
    "SEE ALSO",
    "    yseasmax, yseasmean, yseasavg, yseasstd",
    "",
    "@End_yseasmin",
    "@Begin_yseasmax",
    "NAME",
    "    yseasmax - Multi-year seasonally maximum",
    "",
    "SYNOPSIS",
    "    yseasmax  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = max{i(t,x), month(i(t)) = 12, 01, 02}",
    "    o(2,x) = max{i(t,x), month(i(t)) = 03, 04, 05}",
    "    o(3,x) = max{i(t,x), month(i(t)) = 06, 07, 08}",
    "    o(4,x) = max{i(t,x), month(i(t)) = 09, 10, 11}",
    "",
    "SEE ALSO",
    "    yseasmin, yseasmean, yseasavg, yseasstd",
    "",
    "@End_yseasmax",
    "@Begin_yseasmean",
    "NAME",
    "    yseasmean - Multi-year seasonally mean",
    "",
    "SYNOPSIS",
    "    yseasmean  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = mean{i(t,x), month(i(t)) = 12, 01, 02}",
    "    o(2,x) = mean{i(t,x), month(i(t)) = 03, 04, 05}",
    "    o(3,x) = mean{i(t,x), month(i(t)) = 06, 07, 08}",
    "    o(4,x) = mean{i(t,x), month(i(t)) = 09, 10, 11}",
    "",
    "SEE ALSO",
    "    yseasmin, yseasmax, yseasavg, yseasstd",
    "",
    "@End_yseasmean",
    "@Begin_yseasavg",
    "NAME",
    "    yseasavg - Multi-year seasonally average",
    "",
    "SYNOPSIS",
    "    yseasavg  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = avg{i(t,x), month(i(t)) = 12, 01, 02}",
    "    o(2,x) = avg{i(t,x), month(i(t)) = 03, 04, 05}",
    "    o(3,x) = avg{i(t,x), month(i(t)) = 06, 07, 08}",
    "    o(4,x) = avg{i(t,x), month(i(t)) = 09, 10, 11}",
    "",
    "SEE ALSO",
    "    yseasmin, yseasmax, yseasmean, yseasstd",
    "",
    "@End_yseasavg",
    "@Begin_yseasstd",
    "NAME",
    "    yseasstd - Multi-year seasonally standard deviation",
    "",
    "SYNOPSIS",
    "    yseasstd  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(1,x) = sqrt{var{i(t,x), month(i(t)) = 12, 01, 02}}",
    "    o(2,x) = sqrt{var{i(t,x), month(i(t)) = 03, 04, 05}}",
    "    o(3,x) = sqrt{var{i(t,x), month(i(t)) = 06, 07, 08}}",
    "    o(4,x) = sqrt{var{i(t,x), month(i(t)) = 09, 10, 11}}",
    "",
    "SEE ALSO",
    "    yseasmin, yseasmax, yseasmean, yseasavg",
    "",
    "@End_yseasstd",
    NULL
};

static char *RunstatHelp[] = {
    "@Begin_runmin",
    "NAME",
    "    runmin - Running minimum",
    "",
    "SYNOPSIS",
    "    runmin,nts  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = min{i(t,x), i(t+1,x), ..., i(t+nts-1,x)}",
    "",
    "PARAMETER",
    "    nts   INTEGER  Number of timesteps",
    "",
    "SEE ALSO",
    "    runmax, runsum, runmean, runavg, runstd",
    "",
    "@End_runmin",
    "@Begin_runmax",
    "NAME",
    "    runmax - Running maximum",
    "",
    "SYNOPSIS",
    "    runmax,nts  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = max{i(t,x), i(t+1,x), ..., i(t+nts-1,x)}",
    "",
    "PARAMETER",
    "    nts   INTEGER  Number of timesteps",
    "",
    "SEE ALSO",
    "    runmin, runsum, runmean, runavg, runstd",
    "",
    "@End_runmax",
    "@Begin_runsum",
    "NAME",
    "    runsum - Running sum",
    "",
    "SYNOPSIS",
    "    runsum,nts  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = sum{i(t,x), i(t+1,x), ..., i(t+nts-1,x)}",
    "",
    "PARAMETER",
    "    nts   INTEGER  Number of timesteps",
    "",
    "SEE ALSO",
    "    runmin, runmax, runmean, runavg, runstd",
    "",
    "@End_runsum",
    "@Begin_runmean",
    "NAME",
    "    runmean - Running mean",
    "",
    "SYNOPSIS",
    "    runmean,nts  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = mean{i(t,x), i(t+1,x), ..., i(t+nts-1,x)}",
    "",
    "PARAMETER",
    "    nts   INTEGER  Number of timesteps",
    "",
    "SEE ALSO",
    "    runmin, runmax, runsum, runavg, runstd",
    "",
    "@End_runmean",
    "@Begin_runavg",
    "NAME",
    "    runavg - Running average",
    "",
    "SYNOPSIS",
    "    runavg,nts  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = avg{i(t,x), i(t+1,x), ..., i(t+nts-1,x)}",
    "",
    "PARAMETER",
    "    nts   INTEGER  Number of timesteps",
    "",
    "SEE ALSO",
    "    runmin, runmax, runsum, runmean, runstd",
    "",
    "@End_runavg",
    "@Begin_runstd",
    "NAME",
    "    runstd - Running standard deviation",
    "",
    "SYNOPSIS",
    "    runstd,nts  ifile ofile",
    "",
    "DESCRIPTION",
    "    o(t,x) = sqrt{var{i(t,x), i(t+1,x), ..., i(t+nts-1,x)}}",
    "",
    "PARAMETER",
    "    nts   INTEGER  Number of timesteps",
    "",
    "SEE ALSO",
    "    runmin, runmax, runsum, runmean, runavg",
    "",
    "@End_runstd",
    NULL
};

static char *EnsstatHelp[] = {
    "@Begin_ensmin",
    "NAME",
    "    ensmin - Ensemble minimum",
    "",
    "SYNOPSIS",
    "    ensmin  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmax, enssum, ensmean, ensavg, ensstd, ensvar",
    "",
    "@End_ensmin",
    "@Begin_ensmax",
    "NAME",
    "    ensmax - Ensemble maximum",
    "",
    "SYNOPSIS",
    "    ensmax  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmin, enssum, ensmean, ensavg, ensstd, ensvar",
    "",
    "@End_ensmax",
    "@Begin_enssum",
    "NAME",
    "    enssum - Ensemble sum",
    "",
    "SYNOPSIS",
    "    enssum  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmin, ensmax, ensmean, ensavg, ensstd, ensvar",
    "",
    "@End_enssum",
    "@Begin_ensmean",
    "NAME",
    "    ensmean - Ensemble mean",
    "",
    "SYNOPSIS",
    "    ensmean  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmin, ensmax, enssum, ensavg, ensstd, ensvar",
    "",
    "@End_ensmean",
    "@Begin_ensavg",
    "NAME",
    "    ensavg - Ensemble average",
    "",
    "SYNOPSIS",
    "    ensavg  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmin, ensmax, enssum, ensmean, ensstd, ensvar",
    "",
    "@End_ensavg",
    "@Begin_ensstd",
    "NAME",
    "    ensstd - Ensemble standard deviation",
    "",
    "SYNOPSIS",
    "    ensstd  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmin, ensmax, enssum, ensmean, ensavg, ensvar",
    "",
    "@End_ensstd",
    "@Begin_ensvar",
    "NAME",
    "    ensvar - Ensemble variance",
    "",
    "SYNOPSIS",
    "    ensvar  ifiles ofile",
    "",
    "DESCRIPTION",
    "",
    "SEE ALSO",
    "    ensmin, ensmax, enssum, ensmean, ensavg, ensstd",
    "",
    "@End_ensvar",
    NULL
};

static char *DetrendHelp[] = {
    "@Begin_detrend",
    "NAME",
    "    detrend - Detrend",
    "",
    "SYNOPSIS",
    "    detrend  ifile ofile",
    "",
    "DESCRIPTION",
    "    Every time series in ifile is linearly detrended.",
    "    For every field element x only those timesteps t belong",
    "    to the sample S(x), which have i(t,x) NE miss.",
    "    This operator has to keep the fields of all timesteps concurrently in the memory.",
    "    If not enough memory is available, use the operators trend and subtrend.",
    "",
    "@End_detrend",
    NULL
};

static char *TrendHelp[] = {
    "@Begin_trend",
    "NAME",
    "    trend - Trend",
    "",
    "SYNOPSIS",
    "    trend  ifile ofile1 ofile2",
    "",
    "DESCRIPTION",
    "    The values of the input file ifile are assumed to be distributed as",
    "    N(a+b*t,S^2) with unknown a, b and S^2. This operator estimates the",
    "    parameter a and b.",
    "    For every field element x only those timesteps t belong",
    "    to the sample S(x), which have i(t,x) NE miss.",
    "    The estimation for a is stored in ofile1 and that for b is stored in ofile2.",
    "    To subtract the trend from the data see operator subtrend.",
    "",
    "@End_trend",
    NULL
};

static char *SubtrendHelp[] = {
    "@Begin_subtrend",
    "NAME",
    "    subtrend - Subtract trend",
    "",
    "SYNOPSIS",
    "    subtrend  ifile1 ifile2 ifile3 ofile",
    "",
    "DESCRIPTION",
    "    This operator is for subtracting a trend computed by the operator trend.",
    "    The typical call for detrend the data in ifile and to store the detrended data in ofile is:",
    "    ",
    "      cdo trend ifile afile bfile",
    "      cdo subtrend ifile afile bfile ofile",
    "    ",
    "    It is",
    "    ",
    "    o(t,x) = i_1(t,x) - (i_2(1,x) + i_3(1,x)*t)",
    "",
    "@End_subtrend",
    NULL
};

static char *RemapHelp[] = {
    "@Begin_remapcon",
    "NAME",
    "    remapcon - Conservative remapping",
    "",
    "SYNOPSIS",
    "    remapcon,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    SCRIP first order conservative remapping.",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "ENVIRONMENT",
    "    NORMALIZE_OPT   This variable is used to choose the normalization",
    "        of the remapping. By default, NORMALIZE_OPT is set to be",
    "        'fracarea' and will include the destination area fraction in",
    "        the output weights; other options are 'none' and 'destarea'",
    "        (for more information see {SCRIP}).",
    "",
    "SEE ALSO",
    "    remapbil, remapbic, remapdis, gencon, remap",
    "",
    "@End_remapcon",
    "@Begin_remapbil",
    "NAME",
    "    remapbil - Bilinear interpolation",
    "",
    "SYNOPSIS",
    "    remapbil,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    SCRIP bilinear interpolation (only rectangular grids).",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "SEE ALSO",
    "    remapcon, remapbic, remapdis, gencon, remap",
    "",
    "@End_remapbil",
    "@Begin_remapbic",
    "NAME",
    "    remapbic - Bicubic interpolation",
    "",
    "SYNOPSIS",
    "    remapbic,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    SCRIP bicubic interpolation (only rectangular grids).",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "SEE ALSO",
    "    remapcon, remapbil, remapdis, gencon, remap",
    "",
    "@End_remapbic",
    "@Begin_remapdis",
    "NAME",
    "    remapdis - Distance-weighted averaging",
    "",
    "SYNOPSIS",
    "    remapdis,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    SCRIP distance-weighted average of the four nearest neighbor values.",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "SEE ALSO",
    "    remapcon, remapbil, remapbic, gencon, remap",
    "",
    "@End_remapdis",
    "@Begin_gencon",
    "NAME",
    "    gencon - Generate conservative interpolation weights",
    "",
    "SYNOPSIS",
    "    gencon,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    Generate SCRIP first order conservative interpolation weights and write the result to",
    "    a file.",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "ENVIRONMENT",
    "    NORMALIZE_OPT   This variable is used to choose the normalization",
    "        of the remapping. By default, NORMALIZE_OPT is set to be",
    "        'fracarea' and will include the destination area fraction in",
    "        the output weights; other options are 'none' and 'destarea'",
    "        (for more information see {SCRIP}).",
    "",
    "SEE ALSO",
    "    remapcon, remapbil, remapbic, remapdis, remap",
    "",
    "@End_gencon",
    "@Begin_remap",
    "NAME",
    "    remap - Remapping",
    "",
    "SYNOPSIS",
    "    remap,grid,weights  ifile ofile",
    "",
    "DESCRIPTION",
    "    Remapping with the interpolation weights from a netCDF file.",
    "    The netCDF file must follow the SCRIP convention.",
    "",
    "PARAMETER",
    "    grid      STRING  Grid description file or name of the target grid",
    "    weights   STRING  Interpolation weights (SCRIP netCDF file)",
    "",
    "SEE ALSO",
    "    remapcon, remapbil, remapbic, remapdis, gencon",
    "",
    "@End_remap",
    NULL
};

static char *IntgridHelp[] = {
    "@Begin_interpolate",
    "NAME",
    "    interpolate - Interpolate",
    "",
    "SYNOPSIS",
    "    interpolate,grid  ifile ofile",
    "",
    "DESCRIPTION",
    "    Grid interpolation from PINGO.",
    "",
    "PARAMETER",
    "    grid   STRING  Grid description file or name of the target grid",
    "",
    "@End_interpolate",
    NULL
};

static char *VertintHelp[] = {
    "@Begin_ml2pl",
    "NAME",
    "    ml2pl - Model to pressure level interpolation",
    "",
    "SYNOPSIS",
    "    ml2pl,levels  ifile ofile",
    "",
    "DESCRIPTION",
    "    Interpolate fields on hybrid model level to pressure level.",
    "    The input file must contain the log. surface pressure (LSP/code152)",
    "    or the surface pressure (APS/code134).",
    "    To interpolate the temperature or the geopotential height",
    "    to pressure level, the orography (GEOSP/code129) is also needed.",
    "",
    "PARAMETER",
    "    levels   FLOAT  Pressure levels in pascal",
    "",
    "ENVIRONMENT",
    "    EXTRAPOLATE   If set to 1 extrapolate missing values.",
    "",
    "SEE ALSO",
    "    ml2hl",
    "",
    "@End_ml2pl",
    "@Begin_ml2hl",
    "NAME",
    "    ml2hl - Model to height level interpolation",
    "",
    "SYNOPSIS",
    "    ml2hl,levels  ifile ofile",
    "",
    "DESCRIPTION",
    "    Interpolate fields on hybrid model level to height level.",
    "    The input file must contain the log. surface pressure (LSP/code152)",
    "    or the surface pressure (APS/code134).",
    "    To interpolate the temperature or the geopotential height",
    "    to height level, the orography (GEOSP/code129) is also needed.",
    "",
    "PARAMETER",
    "    levels   FLOAT  Height levels in meter (max level: 65535 m)",
    "",
    "ENVIRONMENT",
    "    EXTRAPOLATE   If set to 1 extrapolate missing values.",
    "",
    "SEE ALSO",
    "    ml2pl",
    "",
    "@End_ml2hl",
    NULL
};

static char *InttimeHelp[] = {
    "@Begin_inttime",
    "NAME",
    "    inttime - Time interpolation",
    "",
    "SYNOPSIS",
    "    inttime,date,time,[inc]  ifile ofile",
    "",
    "DESCRIPTION",
    "    Linear interpolation between timesteps.",
    "",
    "PARAMETER",
    "    date   INTEGER  Start date (format YYYY-MM-DD)",
    "    time   INTEGER  Start time (format HH:MM)",
    "    inc    STRING   Optional increment (minutes, hours or days) [default: 0hour]",
    "",
    "@End_inttime",
    NULL
};

static char *IntyearHelp[] = {
    "@Begin_intyear",
    "NAME",
    "    intyear - Year interpolation",
    "",
    "SYNOPSIS",
    "    intyear,years  ifile1 ifile2 ofile",
    "",
    "DESCRIPTION",
    "    Linear interpolation between two years.",
    "",
    "PARAMETER",
    "    years   INTEGER  Comma separated list of years",
    "",
    "@End_intyear",
    NULL
};

static char *SpectralHelp[] = {
    "@Begin_sp2gp",
    "NAME",
    "    sp2gp - Spectral to gridpoint",
    "",
    "SYNOPSIS",
    "    sp2gp  ifile ofile",
    "",
    "DESCRIPTION",
    "    Convert all spectral fields to Gaussian grid.",
    "    The number of latitudes of the resulting Gaussian grid",
    "    is calculated from the triangular truncation by:",
    "    ",
    "       nlat = NINT((trunc*3 + 1.)/2.)",
    "",
    "SEE ALSO",
    "    sp2gp2, gp2sp, gp2sp2, sp2sp, spcut",
    "",
    "@End_sp2gp",
    "@Begin_sp2gp2",
    "NAME",
    "    sp2gp2 - Spectral to gridpoint (version 2)",
    "",
    "SYNOPSIS",
    "    sp2gp2  ifile ofile",
    "",
    "DESCRIPTION",
    "    Convert all spectral fields to Gaussian grid.",
    "    The number of latitudes of the resulting Gaussian grid",
    "    is calculated from the triangular truncation by:",
    "    ",
    "       nlat = NINT((trunc*2 + 1.)/2.)",
    "    ",
    "    Use this operator to convert ERA40 data e.g. from TL159 to N80.",
    "",
    "SEE ALSO",
    "    sp2gp, gp2sp, gp2sp2, sp2sp, spcut",
    "",
    "@End_sp2gp2",
    "@Begin_gp2sp",
    "NAME",
    "    gp2sp - Gridpoint to spectral",
    "",
    "SYNOPSIS",
    "    gp2sp  ifile ofile",
    "",
    "DESCRIPTION",
    "    Convert all Gaussian gridpoint fields to spectral.",
    "    The triangular truncation of the resulting spherical harmonics",
    "    is calculated from the number of latitudes by:",
    "    ",
    "       trunc = (nlat*2 - 1) / 3",
    "",
    "SEE ALSO",
    "    sp2gp, sp2gp2, gp2sp2, sp2sp, spcut",
    "",
    "@End_gp2sp",
    "@Begin_gp2sp2",
    "NAME",
    "    gp2sp2 - Gridpoint to spectral (version 2)",
    "",
    "SYNOPSIS",
    "    gp2sp2  ifile ofile",
    "",
    "DESCRIPTION",
    "    Convert all Gaussian gridpoint fields to spectral.",
    "    The triangular truncation of the resulting spherical harmonics",
    "    is calculated from the number of latitudes by:",
    "    ",
    "       trunc = (nlat*2 - 1) / 2",
    "    ",
    "    Use this operator to convert ERA40 data e.g. from N80 to TL159",
    "    instead of T106.",
    "",
    "SEE ALSO",
    "    sp2gp, sp2gp2, gp2sp, sp2sp, spcut",
    "",
    "@End_gp2sp2",
    "@Begin_sp2sp",
    "NAME",
    "    sp2sp - Spectral to spectral",
    "",
    "SYNOPSIS",
    "    sp2sp,trunc  ifile ofile",
    "",
    "DESCRIPTION",
    "    Change the triangular truncation of all spectral fields.",
    "    The operator performs downward conversion by cutting the resolution.",
    "    Upward conversions are achieved by filling in zeros.",
    "",
    "PARAMETER",
    "    trunc   INTEGER  New spectral resolution",
    "",
    "SEE ALSO",
    "    sp2gp, sp2gp2, gp2sp, gp2sp2, spcut",
    "",
    "@End_sp2sp",
    "@Begin_spcut",
    "NAME",
    "    spcut - Cut spectral wave number",
    "",
    "SYNOPSIS",
    "    spcut,wnums  ifile ofile",
    "",
    "DESCRIPTION",
    "    Set the user defined wave numbers to zero.",
    "",
    "PARAMETER",
    "    wnums   INTEGER  Comma separated list of wave numbers",
    "",
    "SEE ALSO",
    "    sp2gp, sp2gp2, gp2sp, gp2sp2, sp2sp",
    "",
    "@End_spcut",
    NULL
};

static char *GradsdesHelp[] = {
    "@Begin_gradsdes",
    "NAME",
    "    gradsdes - GrADS data descriptor file",
    "",
    "SYNOPSIS",
    "    gradsdes  ifile",
    "",
    "DESCRIPTION",
    "    Creates a GrADS data descriptor file. Supported file formats",
    "    are GRIB, SERVICE, EXTRA and IEG. For GRIB files the GrADS map",
    "    file is also generated. This is a machine specific version 1 map.",
    "    For SERVICE and EXTRA files the grid must be specified with",
    "    the CDO option '-g <grid>'.",
    "    This operator takes ifile in order to create filenames for",
    "    the descriptor (ifile.ctl) and the map (ifile.gmp) file.",
    "",
    "SEE ALSO",
    "    gradsdes2",
    "",
    "@End_gradsdes",
    "@Begin_gradsdes2",
    "NAME",
    "    gradsdes2 - GrADS data descriptor file (version 2 map)",
    "",
    "SYNOPSIS",
    "    gradsdes2  ifile",
    "",
    "DESCRIPTION",
    "    Creates a GrADS data descriptor file. Supported file formats",
    "    are GRIB, SERVICE, EXTRA and IEG. For GRIB files the GrADS map",
    "    file is also generated. This is a machine independent version 2 map.",
    "    For SERVICE and EXTRA files the grid must be specified with",
    "    the CDO option '-g <grid>'.",
    "    This operator takes ifile in order to create filenames for",
    "    the descriptor (ifile.ctl) and the map (ifile.gmp) file.",
    "",
    "SEE ALSO",
    "    gradsdes",
    "",
    "@End_gradsdes2",
    NULL
};

static char *RotuvHelp[] = {
    "@Begin_rotuvb",
    "NAME",
    "    rotuvb - Backward rotation",
    "",
    "SYNOPSIS",
    "    rotuvb,u,v,...  ifile ofile",
    "",
    "DESCRIPTION",
    "    Operator to perform a backward transformation of velocity",
    "    components u and v from an rotated spherical system to a",
    "    geographical system",
    "",
    "PARAMETER",
    "    u,v,...   STRINGS  Pairs of zonal and meridional velocity components",
    "",
    "@End_rotuvb",
    NULL
};

static char *MastrfuHelp[] = {
    "@Begin_mastrfu",
    "NAME",
    "    mastrfu - Mass stream function",
    "",
    "SYNOPSIS",
    "    mastrfu  ifile ofile",
    "",
    "DESCRIPTION",
    "    Compute the mass stream function (ECHAM code272).",
    "    The input field must be a zonal mean of v-velocity (code132) on pressure levels.",
    "",
    "@End_mastrfu",
    NULL
};
